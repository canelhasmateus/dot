let mapleader=" "

set showmode
set visualbell
set number
set relativenumber

set wrapscan
set incsearch
set smartcase
"""set hlsearch

"""set maxmapdepth
"""set history


set scroll=0
set scrolloff=0
set scrolljump=0
"""set startofline


set clipboard+=unnamed
"""set digraph
"""set keymodel
"""set iskeyword

if has('ide')
    set ideamarks
    set ideajoin
    set idearefactormode=select
    set selectmode=ideaselection
    set ideavimsupport=""
    
    sethandler a:ide
endif


""" Plugins  --------------------------------------------------------------

Plug 'easymotion/vim-easymotion'
let g:EasyMotion_do_mapping = 0
map fq <Plug>(easymotion-bd-jk)
map fl <Plug>(easymotion-w)
map fj <Plug>(easymotion-b)
map f<Space> <Plug>(easymotion-bd-t)
map <leader>ff <Action>(Find)

"""Plug 'dbakker/vim-paragraph-motion'
if has('myAbout')
    ""Normally the { and } motions only match completely empty lines.
    """With this plugin lines that only contain whitespace are also matched.
endif

Plug 'tpope/vim-surround'
if has('myAbout')
    """Commands: ys, cs, ds, S
endif

Plug 'machakann/vim-highlightedyank'
if has('myAbout')
    let g:highlightedyank_highlight_duration = "1000"
    let g:highlightedyank_highlight_duration = "-1"
    let g:highlightedyank_highlight_color = "rgba(160, 160, 160, 155)"
endif 

Plug 'michaeljsmith/vim-indent-object'
if has('myAbout')
    """Additional text objects: ai, ii, aI
endif

if has('myTodo')

    set matchpairs
    packadd matchit

    Plug 'tommcdo/vim-exchange'
    """Commands: cx, cxx, X, cxc

    Plug 'vim-scripts/argtextobj.vim'
    let g:argtextobj_pairs="[:],(:),<:>"
    """Additional text objects: aa, ia

    Plug 'terryma/vim-multiple-cursors'
    """Commands: <A-n>, <A-x>, <A-p>, g<A-n>

    Plug 'preservim/nerdtree'

"""quickscope

endif


""" Overrides ------------------------------------------------ 

"""search
noremap fk *
noremap fi #
noremap ff f

"""redo
nnoremap <leader>. @@
vnoremap . <Esc>`<@@

""" till
nnoremap D dt
nnoremap C ct
nnoremap V vt
nnoremap vv V
nnoremap viv g^vg_
nnoremap DD D


""" end of Word / CamelCase
nnoremap ee e
nnoremap ei ea
nnoremap ea ea
nnoremap ai a
nnoremap cie ciw

""" mark
nnoremap mm ma

"""change / delete
vnoremap p "ad<Esc>p
nnoremap <Del> "adl
vnoremap <Del> "ad
nnoremap <Backspace> "adh
vnoremap <Backspace> "adh
nnoremap cl "act
nnoremap cj "acT
nnoremap ck "acl
nnoremap dl "adt
nnoremap dj "adT
vnoremap <Backspace> "ad


nnoremap dip "adipi<Enter><Esc>
nnoremap <Tab> >>
nnoremap <S-Tab> <<
vnoremap <Tab> >>
vnoremap <Tab> <<
nnoremap <Enter> i<Enter><ESC>


""" Extend-Layer ------
nnoremap i <Nop>
nnoremap a <Nop>

nnoremap <leader>i i
vnoremap <leader>i <Esc>i
nnoremap i k
nnoremap k j
nnoremap j h
nnoremap h ^
nnoremap รง $


nnoremap <Home> ^
nnoremap <C-Home> ^
nnoremap <C-S-Home> v^
nnoremap <S-Home> v^

nnoremap <End> $
nnoremap <C-End> $
nnoremap <C-S-End> v$
nnoremap <S-End> v$


nnoremap <S-Up> vk
nnoremap <S-Right> vl
nnoremap <S-Down> vj
nnoremap <S-Left> vh

inoremap <Home> <Esc>^i
inoremap <C-Home> <Esc>^i
inoremap <C-S-Home> <Esc>g^i
inoremap <S-Home> <Esc>g^i

inoremap <End> <Esc>$a
inoremap <C-End> <Esc>$a
inoremap <C-S-End> <Esc>lv$a
inoremap <S-End> <Esc>lv$

inoremap <S-Up> <Esc>vk
inoremap <S-Right> <Esc>vl
inoremap <S-Down> <Esc>vj
inoremap <S-Left> <Esc>vh


vnoremap <Home> ^
vnoremap <C-Home> ^
vnoremap <C-S-Home> ^
vnoremap <S-Home> ^

vnoremap <End> $
vnoremap <C-End> $
vnoremap <C-S-End> $
vnoremap <S-End> $


vnoremap <Up> k
vnoremap <S-Up> k
vnoremap <Down> j
vnoremap <S-Down> j
vnoremap <Left> h
vnoremap <S-Left> h
vnoremap <Right> l
vnoremap <S-Right> l

""" -------------------------------------------------------

""" Code ----
nnoremap zz zz
nnoremap zi zb
nnoremap zk zt
nnoremap zl zL
nnoremap zj zH

nnoremap x <Nop>
nnoremap x. zo
nnoremap x, zc
nnoremap x0 zM
if has('ide')
    map xo <Action>(OverrideMethods)
    map x1 <Action>(ExpandAllToLevel1)
    map x2 <Action>(ExpandAllToLevel2)
    map x3 <Action>(ExpandAllToLevel3)
    map xt <Action>(ImplementMethods)
    map xi <Action>(MethodUp)
    map xk <Action>(MethodDown)
    map xj <Action>(HippieCompletion)
    map xl <Action>(HippieBackwardCompletion)
else
    nnoremap xi [m
    nnoremap xk ]m
endif


""" Surround ----
nnoremap s <Nop>

if has('ide')
    map st <Action>(InsertLiveTemplate)
    map ss <Action>(SurroundWith)
    map su <Action>(Unwrap)
    map si <Action>(EditorSelectWord)
    map sk <Action>(EditorUnSelectWord)
endif

""" select all scope
nnoremap <leader>sa va}
nnoremap <leader>si vi}
nnoremap <leader>ss Va}



""" Refactoring ----
nnoremap r <Nop>

nnoremap rr gq
vnoremap rr gq

if has('ide')
    map rj <Action>(EditorJoinLines)
    map ra <Action>(IntroduceField)
    map rd <Action>(EditorDuplicate)
    map rn <Action>(RenameElement)
    map rm <Action>(Move)
    map ri <Action>(Inline)
    map rv <Action>(IntroduceVariable)
    map ro <Action>(OptimizeImports)
    map rk <Action>(IntroduceConstant)
    map ru <Action>(EditorToggleCase)
    map rf <Action>(ExtractMethod)
else
   nnoremap rj J
endif

nnoremap rsp vip:sort<CR>
nnoremap rsP vip:%sort!<CR>
vnoremap rs :sort<CR>

""" Quick commands --------------------------
nnoremap q <Nop>

nnoremap qq <Esc>
nnoremap qu {
nnoremap qp }
nnoremap qo %
nnoremap qd K
nnoremap qe zz
nnoremap qi <C-U>
nnoremap qk <C-D>

if has('ide')
    map qw <Action>(ShowErrorDescription)
    map qh <Action>(GotoPreviousError)
    map qรง <Action>(GotoNextError)
    map ql <Action>(Forward)
    map qj <Action>(Back)
else
    nnoremap ql <C-I>
    nnoremap qj <C-O>
endif

""" Window / Open
nnoremap o <Nop>

nnoremap oo o
nnoremap <leader>vim :e ~\.ideavimrc<CR>
map <leader>wr <Action>(IdeaVim.ReloadVimRc.reload)
map <leader>w<A-p> <Action>(SelectInProjectView)
map <leader>wp <Action>(ActivateProjectToolWindow)
map or <Action>(RecentFiles)
map ox <Action>(FileStructurePopup)

""" Navigation
nnoremap n <Nop>

nnoremap nn n
nnoremap nd gD
if has('ide')
    map nf <Action>(GotoFile)
    map nc <Action>(GotoClass)
    map ns <Action>(GotoSymbol)
    map nj <Action>(JumpToLastChange)
    map nl <Action>(JumpToLastChange)
endif






""" Experimental -----------------------------------------


""" Seek Aheads -


""" seek ahead camel case
nnoremap me [w
nnoremap mE [b
nnoremap vie :let @a="]wv[b"<CR>@a

""" seek ahead: next square
nnoremap mi :let @a="/[\rvi["<CR>@a
nnoremap mI :let @a="?]\rvi["<CR>@a

""" seek ahead: next curly
nnoremap ms :let @a="/{\rvi{"<CR>@a
nnoremap mS :let @a="?}\rvi{"<CR>@a

""" seek ahead: next paren
nnoremap mp :let @a="/(\rvi("<CR>@a
nnoremap mP :let @a="?)\rvi("<CR>@a

""" next var
nnoremap mv :let @a="/=\rvg^"<CR>@a
nnoremap mV :let @a="?=\rvg^"<CR>@a

""" next assignment
nnoremap ma :let @a="/=\rlvg_"<CR>@a
nnoremap mA :let @a="?=\rlvg_"<CR>@a

""" seek ahead: generic
nnoremap mt :let @a="/>\rvi>"<CR>@a
nnoremap mT :let @a="?<\rvi>"<CR>@a

""" next call
nnoremap mc :let @a="/(\r%v%B"<CR>@a
nnoremap mC :let @a="?)\r%v%B"<CR>@a

""" next callee
nnoremap mk :let @a="/(\rjvB"<CR>@a
nnoremap mK :let @a="?(\rjvB"<CR>@a

""" seek ahead: next quote
nnoremap mq :let @a="/\"\rvi\""<CR>@a
nnoremap mQ :let @a="?\"\rvi\""<CR>@a

""""todo: next unmatched

""" todo: What exactly is a paragraph?
""" todo: What exactly is a sentence
""" todo: What exactly is a section

""" todo visual P swap





""" bring back
vnoremap <Leader>qj "ad``"aP
nnoremap <Leader>qj V"ad``"aP
nnoremap <Leader>ql magv"ad`a"aP

vnoremap rb :s/)\./)\r./g<CR>:action ReformatCode<CR>