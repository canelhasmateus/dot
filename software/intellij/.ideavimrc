let mapleader=" "

set showmode
set visualbell
set number
set relativenumber
set ruler


set wrapscan
set incsearch
set smartcase

"""set hlsearch

"""set maxmapdepth
"""set history

set scroll=0
set scrolloff=0
set scrolljump=5
"""set startofline

"""set keymodel="startsel,stopsel"
"""set selection='inclusive'
"""set selectmode=""

set clipboard+=unnamed

"""set digraph
"""set iskeyword
let g:argtextobj_pairs="[:],(:),<:>"



if has('ide')

set ideamarks
set ideajoin
set idearefactormode=select
set ideavimsupport=""


sethandler <ESC> a:ide
sethandler <C-x> a:ide
sethandler <A-F> a:ide
sethandler <A-S> a:ide
sethandler <A-f> a:ide
sethandler <C-I> a:ide
sethandler <C-B> a:ide
sethandler <C-L> a:ide
sethandler <A-N> a:ide
sethandler <C-P> a:ide
sethandler <C-R> a:ide
sethandler <C-U> a:ide
sethandler <A-X> a:ide
sethandler <C-\> a:ide
sethandler <M-F> a:ide
sethandler <M-n> a:ide
sethandler <C-w> a:ide
sethandler <C-D> a:ide
sethandler <C-c> a:ide
sethandler <C-s> a:ide
sethandler <C-]> a:ide
sethandler <C-[> a:ide
sethandler <C-v> a:ide
sethandler <C-A> a:ide


"""Plug 'preservim/nerdtree'
"""Plug 'terryma/vim-multiple-cursor'
"""Plug 'tpope/vim-commentary'
"""Plug 'vim-scripts/ReplaceWithRegister'
"""Plug 'vim-scripts/argtextobj.vim'
"""set sneak
"""quickscope


"""let g:match_words = '<:>,<tag>:</tag>'

Plug 'michaeljsmith/vim-ident-object' """Additional text objects: ai, ii, aI

Plug 'tommcdo/vim-exchange' """Commands: cx, cxx, X, cxc

Plug 'tpope/vim-surround' """Commands: ys, cs, ds, S

endif

""" Overrides ------------------------------------------------

""" typos
nnoremap cie ciw

""" Directionals and Extend Layer

nnoremap <Tab> >>gv
nnoremap <S-Tab> <<gv
vnoremap <Tab> >>gv
nnoremap <Enter> i<Enter><ESC>

nnoremap i k
nnoremap k j
nnoremap j h
nnoremap h g^
nnoremap ç g$

nnoremap <leader>i i
nnoremap <leader>a a
vnoremap <leader>i <Esc>i
vnoremap <leader>a <Esc>a

nnoremap <Home> g^
nnoremap <C-Home> g^
nnoremap <C-S-Home> v^
nnoremap <S-Home> v^

nnoremap <End> g$
nnoremap <C-End> g$
nnoremap <C-S-End> v$
nnoremap <S-End> v$


nnoremap <S-Up> vk
nnoremap <S-Right> vl
nnoremap <S-Down> vj
nnoremap <S-Left> vh

inoremap <Home> <Esc>^i
inoremap <C-Home> <Esc>^i
inoremap <C-S-Home> <Esc>vg^
inoremap <S-Home> <Esc>vg^

inoremap <End> <Esc>$a
inoremap <C-End> <Esc>$a
inoremap <C-S-End> <Esc>lv$a
inoremap <S-End> <Esc>lv$

inoremap <S-Up> <Esc>vk
inoremap <S-Right> <Esc>vl
inoremap <S-Down> <Esc>vj
inoremap <S-Left> <Esc>vh


nnoremap <leader>i i
nnoremap <leader>a a

vnoremap <leader>i <Esc>i
vnoremap <leader>a <Esc>a

vnoremap <Home> ^
vnoremap <C-Home> ^
vnoremap <C-S-Home> ^
vnoremap <S-Home> ^

vnoremap <End> $
vnoremap <C-End> $
vnoremap <C-S-End> $
vnoremap <S-End> $

"""vnoremap <Up> k
"""vnoremap <Down> j
"""vnoremap <Left> h
"""vnoremap <Right> l

vnoremap <S-Up> k
vnoremap <S-Down> j
vnoremap <S-Left> h
vnoremap <S-Right> l


""" ____________________ [Q] prefix controls [Q]uick commands

nnoremap q <Nop>
nnoremap qq <Esc>
nnoremap qe zz

nnoremap qo %
nnoremap qu {
nnoremap qp }

nnoremap qi <C-U>
nnoremap qk <C-D>



vnoremap qu {
vnoremap qp }

if has('ide')

    Plug 'chrisbra/matchit'
    map qo <Plug>(MatchitMotion)


    Plug 'dbakker/vim-paragraph-motion'
    map qu <Plug>(ParagraphPrevMotion)
    map qp <Plug>(ParagraphNextMotion)

    map qw <Action>(ShowErrorDescription)
    map qh <Action>(GotoPreviousError)
    map qç <Action>(GotoNextError)
    map qj <Action>(Back)
    map ql <Action>(Forward)
    map qJ <Action>(JumpToLastChange)
    map qL <Action>(JumpToNextChange)

    """todo quick evaluate expression map qe <Action>()

else

    nnoremap ql <C-I>
    nnoremap qj <C-O>

endif


""" ____________________ [W] prefix is for [W]ord movement



""" ____________________ [E] prefix controls [E]dit cursor

nnoremap ee e
nnoremap ea ea

nnoremap ei O
nnoremap ek o

nnoremap el ea
nnoremap ej bi
nnoremap eç A
nnoremap e<End> A
nnoremap eh I
nnoremap e<Home> I

nnoremap eu {a
nnoremap ep }i

vnoremap ee e
vnoremap ei O
vnoremap ek o


""" ____________________ [R] prefix controls [R]efactoring

nnoremap r <Nop>
nnoremap rj J
nnoremap rr gq
nnoremap rsp vip:sort i<CR>
nnoremap rsP vip:sort! i<CR>

nnoremap rd "ayy"ap
vnoremap rr gq

if has('ide')

    map rsi <Action>(ChangeSignature)
    map r<Del> <Action>(SafeDelete)

    map ra <Action>(IntroduceField)
    map rd <Action>(EditorDuplicate)
    map rf <Action>(ExtractMethod)
    map ri <Action>(Inline)
    map rj <Action>(EditorJoinLines)
    map rk <Action>(IntroduceConstant)
    map rm <Action>(Move)
    map rn <Action>(RenameElement)
    map ro <Action>(OptimizeImports)
    nmap rr <Action>(ReformatCode)
    """todo auto-indent instead of reformat
    vmap rr <Action>(AutoIndentLines)

    map rt <Action>(MembersPullUp)
    map ru <Action>(EditorToggleCase)
    map rv <Action>(IntroduceVariable)
    vnoremap rb :s/)\./)\r./g<CR>:action ReformatCode<CR>

endif


""" ____________________ [T] prefix is unmodified

""" ____________________ [Y] prefix is for yanking
if has('ide')

Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = "1000"
let g:highlightedyank_highlight_color = "rgba(100, 160, 100, 100)"

endif

""" ____________________ [U] prefix is unmodified

""" ____________________ [I] prefix is directional

""" ____________________ [O] prefix controls [O]pening of popups

nnoremap o <Nop>
vnoremap o <Nop>

if has('ide')

    map oe <Action>(RecentChangedFiles)
    map or <Action>(RecentFiles)
    map ox <Action>(FileStructurePopup)
    map ou <Action>(ShowUsages)

    map op <Action>(PasteMultiple)

    """todo map oh <Action>(ProductivityGuide)
    """todo map os <Action>(ActivateTerminalToolWindow)
    """todo map ot <Action>(Rest Client)
    """todo map ot <Action>(Quick Swithc scheme)
    """todo EditBreakpoint
    """todo ViewBreakpoints
    """todo evaluate expression

endif



""" ____________________ [P] prefix controls [P]asting
vnoremap p "ad<Esc>p

"""___________________________________________________________________________________________________________________________________________________


""" ____________________ [A] prefix is Undetermined

nnoremap ai a

""" ____________________ [S] Prefix Controls [S]urroundings

nnoremap s <Nop>
if has('ide')

    map st <Action>(InsertLiveTemplate)
    map ss <Action>(SurroundWith)
    map su <Action>(Unwrap)
    map si <Action>(EditorSelectWord)
    map sk <Action>(EditorUnSelectWord)

endif

" Java - Remove generic
nnoremap so vi<"ay/><CR>v?\<<CR>B"ap

" Java - surround with generic typings
nmap sqo viwS><leader>iOptional
vmap sqo S><leader>iOptional
nmap sql viwS><leader>iList
vmap sql wS><leader>iList

" Java - surround with generic functions
nmap sfl viwS)<leader>iCollections.singletonList
vmap sfl S)<leader>iCollections.singletonList

""" ____________________ [D] Prefix Controls [D]eletions

nnoremap d<Space> "adf<Space>
nnoremap dn :<C-u>call deleteUpTo
nnoremap dl "adt
nnoremap dj "adT
nnoremap d<Home> "ad<Home>
nnoremap dh "ad<Home>
nnoremap d<End> "ad<End>
nnoremap dç "ad<End>

nnoremap D "adt
nnoremap DD "aD
nnoremap dip "adipO<Esc>

nnoremap <Del> "adl
nnoremap <C-Del> "adw
nnoremap <Backspace> "adh
nnoremap <C-Backspace> "adb

vnoremap <Del> "ad
vnoremap <C-Del> "ad
vnoremap <Backspace> "ad
vnoremap <C-Backspace> "ad

"""nnoremap di "adk
"""nnoremap dk "adj


""" ____________________ [F] Prefix Controls [F]ind

nnoremap f <Nop>
nnoremap fu :set invhlsearch<CR>
nnoremap fk *
nnoremap fi #
nnoremap fn n
nnoremap fe t

nnoremap <A-f>f /
nnoremap fr :s/
nnoremap <leader>fr &
vnoremap fr :s/
nnoremap ff f
vnoremap ff f

if has('ide')

    Plug 'easymotion/vim-easymotion'
    let g:EasyMotion_do_mapping = 0
    
    map fl <Plug>(easymotion-w)
    map fj <Plug>(easymotion-b)
    map fç <Plug>(easymotion-eol-j)
    map fh <Plug>(easymotion-sol-k)

    map fL <Plug>(easymotion-e)
    map fJ <Plug>(easymotion-ge)
    map fÇ <Plug>(easymotion-sol-j)
    map fH <Plug>(easymotion-eol-k)


    map f. <Plug>(easymotion-bd-n)
    nmap fp <Plug>(easymotion-jumptoanywhere)

    """todo map off <Action>(StructuralSearchPlugin.StructuralSearchAction)
    """todo map ofr <Action>(StructuralSearchPlugin.StructuralReplaceAction)
    """todo map ofp <Action>(FindInPath)

endif

""" ____________________ [G] Prefix is directional ( Home )
""" ____________________ [J] Prefix is directional ( Left )
""" ____________________ [K] Prefix is directional ( Down )
""" ____________________ [L] Prefix is directional ( Right )
""" ____________________ [Ç] Prefix is directional ( End )


"""___________________________________________________________________________________________________________________________________________________

""" ________________________________ [Z] prefix controls [Z]ooming, [Z]ips and Scroll

nnoremap zz zz
nnoremap zi zb
vnoremap zi zb
nnoremap zk zt
vnoremap zk zt
nnoremap zl zL
nnoremap zj zH

""" ________________________________ [X] prefix controls code stuff

nnoremap x <Nop>

nnoremap x. zo
nnoremap x, zc
nnoremap x0 zM


nnoremap xi [m
nnoremap xk ]m


if has('ide')

    nmap xx vkxx
    vmap xx <Plug>(Exchange)


    map x1 <Action>(ExpandAllToLevel1)
    map x2 <Action>(ExpandAllToLevel2)
    map x3 <Action>(ExpandAllToLevel3)

    map xri <Action>(ImplementMethods)
    map xro <Action>(OverrideMethods)
    map xrd <Action>(DelegateMethods)


    map xi <Action>(MethodUp)
    map xk <Action>(MethodDown)
    map xl <Action>(SliceForward)
    map xj <Action>(SliceBackward)

    map xoc <Action>(CallHierarchy)
    map xot <Action>(TypeHierarchy)
    map xom <Action>(MethodHierarchy)
    map xoi <Action>(RunInspection)
    map xor <Action>(CodeCleanup)

    """todo a quick list of some actions map xo <>
    """todo complete current statement
    """todo better templates
    """todo better postfixes
    """todo create emmet engine for other languages
endif


""" ________________________________ [C] prefix controls [C]hanging

nnoremap ck "acl
nnoremap cl "act
nnoremap cj "acT
nnoremap c<Home> "ac<Home>
nnoremap c<End> "ac<End>

nnoremap C "act


""" ________________________________ [V] prefix controls [V]isual selections

nnoremap V vt
nnoremap vv V
nnoremap viv g^vg_
nnoremap vk v

" All - this paren
nnoremap vp vi)
nnoremap vd vi}
"vnoremap mp <Esc>/\v(\()!@)<CR>nva(o

" Java - select all scope
nnoremap vsa va}
nnoremap vsi vi}
nnoremap vss Va}g$og^


""" ________________________________ [B] prefix is unmodified

"""nnoremap bb b


""" ________________________________ [N] prefix controls [N]avigation

nnoremap n <Nop>
nnoremap nn n

nnoremap nd gD
vnoremap nd <Esc>gD
nnoremap <A-n>k G
nnoremap <A-n>i gg

if has('ide')

    map nd <Action>(GotoDeclaration)
    map nD <Action>(GotoTypeDeclaration)
    map nt <Action>(GotoTest)
    map ni <Action>(GotoImplementation)
    map nr <Action>(GotoRelated)
    map nS <Action>(GotoSuperMethod)

    map np <Action>(ShowNavBar)

    map nn <Action>(SearchEverywhere)
    map na <Action>(GotoAction)
    map nf <Action>(GotoFile)
    map nc <Action>(GotoClass)
    map ns <Action>(GotoSymbol)
    map nl <Action>(GotoLine)
    map nb <Action>(ShowNavBar)


endif

""" ________________________________ [M] prefix controls [M]ove aheads

" All - next quote
nnoremap mq /"<CR>vi"
nnoremap mQ ?"<CR>nvi"
vnoremap mq /"<CR><Esc>/"<CR>vi"
vnoremap mQ ?"<CR><Esc>?"<CR>nvi"

" All - next fun
nnoremap mf /(<CR>vi)o
nnoremap mF ?)<CR>vi)o
vnoremap mf <Esc>/(<CR>vi)o
vnoremap mF <Esc>?)<CR>vi)o


nnoremap mp vi)o
vnoremap mp <Esc>/(<CR>vi)o

"vnoremap mP <Esc>?([^)]<CR>nva(o


" All - next | current curly

" ms is being used by something

nnoremap ma :call moveBrace()<CR>
vnoremap ma <Esc>:call moveBrace()<CR>

nnoremap mA ?{<CR>vi}
vnoremap mA <Esc>?{<CR>nvi}

" All - next angle


nnoremap m> :call moveAngle()<CR>
vnoremap m> <Esc>:call moveAngle()<CR>

nnoremap m< ?<<CR>vi>
vnoremap m< <Esc>?<<CR>vi>

" All - seek ahead camel case
nnoremap me [w
nnoremap mE [b
nnoremap vie ]wv[b

" Java - next semicolon
nnoremap mç v/;<CR>
nnoremap mÇ v?;<CR>
vnoremap mç /;<CR>
vnoremap mÇ ?;<CR>

" All - next [list]


nnoremap ml :call moveList(1)<CR>
vnoremap ml <Esc>:call moveList(1)<CR>

nnoremap mL ?]<CR>vi[
vnoremap mL /[<CR><Esc>nvi[


""" Java next var

nnoremap mv /=/e-1<CR>v^
vnoremap mv <Esc>/=/e-1<CR>nv^

nnoremap mV ?=?e-1<CR>v^
vnoremap mV <Esc>?=?e-1<CR>v^

""" Java next definition

nnoremap md /= \+/e1<CR>v/;/e-1<CR>
vnoremap md <Esc>/= \+/e1<CR>v/;/e-1<CR>
nnoremap mD ?= \+?e1<CR>v/;/v-1<CR>o
vnoremap mD <Esc>?= \+?e1<CR>v/;/v-1<CR>o

""" Java next call - cant use mc because of multicursor remaps.

nnoremap mm /\S(/e-1<CR>v?\v[ ()=.]?e+1<CR>o
vnoremap mm <Esc>/\S(/e-1<CR>v?\v[ ()=.]?e+1<CR>o

nnoremap mM ?(?e-1<CR>vBo
vnoremap mM <Esc>?(?e-1<CR>vBo

""" ________________________________

""" ________________________________

""" Experimental -----------------------------------------

nnoremap daa da>
nnoremap dia di>
nnoremap vaa va>
nnoremap via vi>

if has("ide")

set multicursor

vmap <leader>l <Plug>(multicursor-ms0)
nmap <leader>c <Plug>(multicursor-mc/)
vmap <leader>c <Plug>(multicursor-mc/)

endif


""" mark
nnoremap <leader>ma m
nnoremap <leader>jj $h"ayiw^i@JsonProperty("<Esc>"apli")<Space><Esc>

nnoremap <leader>vim :e ~\.ideavimrc<CR>
if has("ide")

    map <leader>wr <Action>(IdeaVim.ReloadVimRc.reload)
    map <leader>w<A-p> <Action>(SelectInProjectView)
    map <leader>wp <Action>(ActivateProjectToolWindow)

    nmap <leader>q <Action>(ShowErrorDescription)
else

    nnoremap <leader>wr :w<CR>:source ~\.ideavimrc<CR>


endif


lua << EOF

require "user.options"
require "user.keymaps"
require "user.plugins"
require "user.colorscheme"
require "user.cmp"

vim.cmd "colorscheme darkplus"


EOF


