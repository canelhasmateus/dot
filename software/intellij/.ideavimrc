let mapleader=" "

set showmode
set visualbell
set number
set relativenumber
set ruler


set wrapscan
"""set incsearch
set smartcase

"""set hlsearch

"""set maxmapdepth
"""set history

set scroll=0
set scrolloff=0
set scrolljump=0
"""set startofline

"""set keymodel="startsel,stopsel"
"""set selection='inclusive'
"""set selectmode=""

set clipboard+=unnamed
"""set digraph
"""set iskeyword

if has('ide')
    set ideamarks
    set ideajoin
    set idearefactormode=select
    set ideavimsupport=""


    sethandler <ESC> a:ide
    sethandler <C-x> a:ide
    sethandler <A-F> a:ide
    sethandler <A-S> a:ide
    sethandler <A-f> a:ide
    sethandler <C-I> a:ide
    sethandler <C-B> a:ide
    sethandler <C-L> a:ide
    sethandler <A-N> a:ide
    sethandler <C-P> a:ide
    sethandler <C-R> a:ide
    sethandler <C-U> a:ide
    sethandler <A-X> a:ide
    sethandler <C-\> a:ide
    sethandler <M-F> a:ide
    sethandler <M-n> a:ide
    sethandler <C-w> a:ide
    sethandler <C-D> a:ide
    sethandler <C-c> a:ide
    sethandler <C-s> a:ide
    sethandler <C-]> a:ide
    sethandler <C-[> a:ide
    sethandler <C-v> a:ide
    sethandler <C-A> a:ide

    sethandler <M-A> a:ide
    sethandler <A-Right> a:vim
    sethandler <S-A-Right> a:vim
    sethandler <A-Left> a:vim
    sethandler <S-A-Left> a:vim

"""Plug 'preservim/nerdtree'
"""Plug 'terryma/vim-multiple-cursor'
"""Plug 'tpope/vim-commentary'
"""Plug 'vim-scripts/ReplaceWithRegisters
"""Plug 'vim-scripts/argtextobj.vim'
"""let g:argtextobj_pairs="[:],(:),<:>"

"""set sneak
"""quickscope


"""let g:match_words = '<:>,<tag>:</tag>'


endif
Plug 'michaeljsmith/vim-ident-object' """Additional text objects: ai, ii, aI
Plug 'tommcdo/vim-exchange' """Commands: cx, cxx, X, cxc
Plug 'tpope/vim-surround'

""" Overrides ------------------------------------------------

""" typos
nnoremap cie ciw

""" Directionals and Extend Layer

nnoremap <Tab> >>
nnoremap <S-Tab> <<
vnoremap <Tab> >>gv
vnoremap <S-Tab> <<gv

nnoremap <Enter> i<Enter><ESC>

nnoremap i gk
nnoremap k gj
nnoremap j h
nnoremap h g^
nnoremap ç g$

nnoremap <A-Right> W
nnoremap <S-A-Right> vW
nnoremap <S-A-Left> vB
nnoremap <A-Left> B

vnoremap <A-Right> W
vnoremap <S-A-Right> W
vnoremap <A-Left> B
vnoremap <S-A-Left> B

nnoremap <Up> gk
nnoremap <Down> gj


nnoremap <leader>i i
nnoremap <leader>a a
vnoremap <leader>i <Esc>i
vnoremap <leader>a <Esc>a

nnoremap <Home> g^
nnoremap <C-Home> g^
nnoremap <C-S-Home> v^
nnoremap <S-Home> v^

nnoremap <End> g$
nnoremap <C-End> g$
nnoremap <C-S-End> v$
nnoremap <S-End> v$


nnoremap <S-Up> vk
nnoremap <S-Right> vl
nnoremap <S-Down> vj
nnoremap <S-Left> vh

inoremap <Home> <Esc>^i
inoremap <C-Home> <Esc>^i
inoremap <C-S-Home> <Esc>vg^
inoremap <S-Home> <Esc>vg^

inoremap <End> <Esc>$a
inoremap <C-End> <Esc>$a
inoremap <C-S-End> <Esc>lv$a
inoremap <S-End> <Esc>lv$

inoremap <S-Up> <Esc>vk
inoremap <S-Right> <Esc>vl
inoremap <S-Down> <Esc>vj
inoremap <S-Left> <Esc>vh

nnoremap <A-Right> W
nnoremap <A-Left> B


nnoremap <leader>i i
nnoremap <leader>a a

vnoremap <leader>i <Esc>i
vnoremap <leader>a <Esc>a

vnoremap <Home> ^
vnoremap <C-Home> ^
vnoremap <C-S-Home> ^
vnoremap <S-Home> ^

vnoremap <End> $
vnoremap <C-End> $
vnoremap <C-S-End> $
vnoremap <S-End> $

"""vnoremap <Up> k
"""vnoremap <Down> j
"""vnoremap <Left> h
"""vnoremap <Right> l

vnoremap <S-Up> k
vnoremap <S-Down> j
vnoremap <S-Left> h
vnoremap <S-Right> l


""" ____________________ [Q] prefix controls [Q]uick commands

nnoremap q <Nop>
nnoremap qq <Esc>
nnoremap qe zz

nmap qo %
nnoremap qu {
nnoremap qp }

nnoremap qi <C-U>
nnoremap qk <C-D>

vnoremap qi {
vnoremap qk }

nnoremap ql <C-I>
nnoremap qj <C-O>

vmap qo %
vnoremap qu {
vnoremap qp }

Plug 'chrisbra/matchit'
Plug 'dbakker/vim-paragraph-motion'
if has('ide')

    map qo <Plug>(MatchitMotion)


    map qu <Plug>(ParagraphPrevMotion)
    map qp <Plug>(ParagraphNextMotion)


    map qd <Action>(CompareTwoFiles)
    map qw <Action>(ShowErrorDescription)

    map qh <Action>(GotoPreviousError)
    map qç <Action>(GotoNextError)

    map qj <Action>(Back)
    map ql <Action>(Forward)
    map qJ <Action>(JumpToLastChange)
    map qL <Action>(JumpToNextChange)

    """todo quick evaluate expression map qe <Action>()

endif


""" ____________________ [W] prefix is for [W]ord movement


"""nnoremap w <Nop>
"""nnoremap ww w

"""nnoremap wl w
"""nnoremap wj b
"""nnoremap wç W
"""nnoremap wh B

"""nnoremap wo e
"""nnoremap wu ge

""" ____________________ [E] prefix controls [E]dit cursor

nnoremap ee e
vnoremap ee e

nnoremap ea a """ Todo could be better

nnoremap ei O
nnoremap ek o
vnoremap ei <Esc>`<O
vnoremap ek <Esc>`>o

nnoremap ej bi
nnoremap el ea
vnoremap ej <Esc>`<i
vnoremap el <Esc>`>a

nnoremap eL Ea
nnoremap eJ Bi
""" no visual counterpart

nnoremap eç A
vnoremap eç A
nnoremap eh I
vnoremap eh I

nnoremap eu {a
nnoremap ep }i
""" no visual counterpart

nnoremap eo %a
vnoremap eo <Esc>%i

nnoremap eml ]wa
nnoremap emj [bi
vnoremap eml <Esc>`>]wa
vnoremap emj <Esc>`<[bi

"" Experimental
nnoremap e, /,<CR>i
nnoremap e; /;<CR>i
nnoremap e) /)<CR>i
nnoremap e( /(<CR>i
nnoremap e? /?<CR>i
nnoremap ed /{<CR>i


""" ____________________ [R] prefix controls [R]efactoring

nnoremap r <Nop>
nnoremap rj J
nnoremap rr gq
nnoremap rsp vip:sort i<CR>
nnoremap rsP vip:sort! i<CR>

nnoremap rd "ayy"ap
vnoremap rr gq

vnoremap rb :s/)\./)\r./g<CR>
vnoremap r, :s/,/,\r/g<CR>
if has('ide')

        map rsi <Action>(ChangeSignature)
        map r<Del> <Action>(SafeDelete)

        map ra <Action>(IntroduceField)
        map rd <Action>(EditorDuplicate)
        map rf <Action>(ExtractMethod)
        map ri <Action>(Inline)
        map rj <Action>(EditorJoinLines)
        map rk <Action>(IntroduceConstant)
        map rm <Action>(Move)
        map rn <Action>(RenameElement)
        map ro <Action>(OptimizeImports)
        map rr <Action>(ReformatCode)
    """vmap rr <Action>(AutoIndentLines)
        map rt <Action>(MembersPullUp)
        map ru <Action>(EditorToggleCase)
        map rv <Action>(IntroduceVariable)
        vnoremap rb :s/)\./)\r./g<CR>:action ReformatCode<CR>
        vnoremap r, :s/,/,\r/g<CR>:action ReformatCode<CR>
endif


""" ____________________ [T] prefix is unmodified

""" ____________________ [Y] prefix is for yanking
if has('ide')

    Plug 'machakann/vim-highlightedyank'
    let g:highlightedyank_highlight_duration = "1000"
    let g:highlightedyank_highlight_color = "rgba(100, 160, 100, 100)"

endif

""" ____________________ [U] prefix is unmodified

""" ____________________ [I] prefix is directional

""" ____________________ [O] prefix controls [O]pening of popups

nnoremap o <Nop>
vnoremap o <Nop>
vnoremap oi o

if has('ide')

        map oe <Action>(RecentChangedFiles)
        map or <Action>(RecentFiles)
        map oR <Action>($LRU)
        map ox <Action>(FileStructurePopup)
        map op <Action>(PasteMultiple)
        map oq <Action>(RecentLocations)

    """todo ShowRecentTests
    """todo RecentChanges
    """todo map oh <Action>(ProductivityGuide)
    """todo map os <Action>(ActivateTerminalToolWindow)
    """todo map ot <Action>(Rest Client)
    """todo map ot <Action>(Quick Swithc scheme)
    """todo EditBreakpoint
    """todo ViewBreakpoints
    """todo evaluate expression

        map osm <Action>(RunMenu)
        map osx <Action>(ChooseRunConfiguration)
        map ovo <Action>(ImportTests)
        map ovv <Action>(ShowRecentTests)

endif



""" ____________________ [P] prefix controls [P]asting
vnoremap p "ad<Esc>p
vnoremap P "ad<Esc>P

"""___________________________________________________________________________________________________________________________________________________


""" ____________________ [A] prefix is Undetermined

nnoremap ai a
nnoremap al f
nnoremap aj F

""" ____________________ [S] Prefix Controls [S]urroundings

nnoremap s <Nop>
if has('ide')
        map ss <Action>(SurroundWith)
        map su <Action>(Unwrap)
        map si <Action>(EditorSelectWord)
        map sk <Action>(EditorUnSelectWord)
endif

" Java - Remove generic
nnoremap so vi<"ay/><CR>v?\<<CR>B"ap
    " Java - surround with generic typings

nnoremap sqo ea><Esc>biOptional<
nnoremap sql viw<Esc>a><Esc>biList<

" Java - surround with generic functions
nmap sfl viwS)<leader>iCollections.singletonList
vmap sfl S)<leader>iCollections.singletonList

""" ____________________ [D] Prefix Controls [D]eletions

nnoremap d<Space> "adf<Space>
nnoremap dn :<C-u>call deleteUpTo
nnoremap dl "adt
nnoremap dj "adT
nnoremap dk "adl
nnoremap d<Home> "ad<Home>
nnoremap dh "ad<Home>
nnoremap d<End> "ad<End>
nnoremap dç "ad<End>
nnoremap do d%
nnoremap dp d}
nnoremap du d{
nnoremap d; dt;

nnoremap D "adt
nnoremap DD "aD
nnoremap dip "adipO<Esc>

nnoremap <Del> "adl
nnoremap <C-Del> "adw
nnoremap <Backspace> "adh
nnoremap <C-Backspace> "adb

vnoremap <Del> "ad
vnoremap <C-Del> "ad
vnoremap <Backspace> "ad
vnoremap <C-Backspace> "ad

"""nnoremap di "adk
"""nnoremap dk "adj


""" ____________________ [F] Prefix Controls [F]ind

nnoremap f <Nop>
nnoremap fu :set invhlsearch<CR>
nnoremap fk *
nnoremap fi #
nnoremap fn n
nnoremap fe t

""" todo: search for currently selected text vnoremap fk "ay/\V<C-R>=escape(@",'/\')<CR><CR>

"""todo yank to search register
nnoremap fy viw"/y
vnoremap fy "/y
nnoremap <A-f>f /

nnoremap fr :s/
vnoremap fr :s/
nnoremap f. &
vnoremap f. &

nnoremap ff f
vnoremap ff f

if has('ide')

    Plug 'easymotion/vim-easymotion'
    let g:EasyMotion_do_mapping = 0
    map <A-f><A-f> <Action>(Find)
    map fK <Action>(SelectNextOccurrence)
    map fI <Action>(UnselectPreviousOccurrence)
    map f<C-I> <Action>(SelectAllOccurrences)

    map fl <Plug>(easymotion-w)
    map fj <Plug>(easymotion-b)
    map fç <Plug>(easymotion-eol-j)
    map fh <Plug>(easymotion-sol-k)

    map fL <Plug>(easymotion-e)
    map fJ <Plug>(easymotion-ge)
    map fÇ <Plug>(easymotion-sol-j)
    map fH <Plug>(easymotion-eol-k)

    """map f. <Plug>(easymotion-bd-n)

    nmap fp <Plug>(easymotion-jumptoanywhere)

    map of <Action>(StructuralSearchPlugin.StructuralSearchAction)
    """todo map ofr <Action>(StructuralSearchPlugin.StructuralReplaceAction)
    """todo map ofp <Action>(FindInPath)

endif

""" ____________________ [G] Prefix is directional ( Home )
""" ____________________ [J] Prefix is directional ( Left )
""" ____________________ [K] Prefix is directional ( Down )
""" ____________________ [L] Prefix is directional ( Right )
""" ____________________ [Ç] Prefix is directional ( End )


"""___________________________________________________________________________________________________________________________________________________

""" ________________________________ [Z] prefix controls [Z]ooming, [Z]ips and Scroll

nnoremap zz zz
nnoremap zi zb
vnoremap zi zb
nnoremap zk zt
vnoremap zk zt
nnoremap zl zL
nnoremap zj zH

if has('ide')

    map znl <Action>(SplitVertically)
    map znk <Action>(SplitHorizontally)
    map zno <Action>(ChangeSplitOrientation)

    map z<Del>(Unsplit)
    map z<Backspace> <Action>(UnsplitAll)

    map zml <Action>(NextSplitter)
    map zmj <Action>(PrevSplitter)
    map qml <Action>(NextSplitter)
    map qmj <Action>(PrevSplitter)

endif
""" ________________________________ [X] prefix controls code stuff

nnoremap x <Nop>

nnoremap x. zo
nnoremap x, zc
nnoremap x0 zM


nnoremap xi [m
nnoremap xk ]m


if has('ide')



    map x1 <Action>(ExpandAllToLevel1)
    map x2 <Action>(ExpandAllToLevel2)
    map x3 <Action>(ExpandAllToLevel3)

    map xri <Action>(ImplementMethods)
    map xro <Action>(OverrideMethods)
    map xrd <Action>(DelegateMethods)

    map xi <Action>(MethodUp)
    map xk <Action>(MethodDown)
    map xl <Action>(SliceForward)
    map xj <Action>(SliceBackward)

    map xoc <Action>(CallHierarchy)
    map xot <Action>(TypeHierarchy)
    map xom <Action>(MethodHierarchy)
    map xoi <Action>(RunInspection)
    map xor <Action>(CodeCleanup)

    """todo a quick list of some actions map xo <>
    """todo complete current statement
    """todo better templates
    """todo better postfixes
    """todo create emmet engine for other languages
    map xns <Action>(InsertLiveTemplate)
    map xnv <Action>(GenerateTestMethod)

endif


""" ________________________________ [C] prefix controls [C]hanging

nnoremap ck "acl
nnoremap cl "act
nnoremap cj "acT
nnoremap c<Home> "ac<Home>
nnoremap c<End> "ac<End>
nnoremap cç c$
nnoremap ch c0
nnoremap co c%

nnoremap C "act

""" ________________________________ [V] prefix controls [V]isual selections

nnoremap vb <C-v>
vnoremap vb <C-v>
nnoremap V vt
nnoremap vl vt
nnoremap vj vT
nnoremap vv V
nnoremap viv g^vg_
nnoremap vk v

" All - this paren
nnoremap vp vi)
nnoremap vd vi}
nnoremap vq vi"
" Java - select all scope
nnoremap vss va}V
nnoremap vsi vi}
nnoremap vsp va)V


""" ________________________________ [B] prefix is unmodified

"""nnoremap bb b


""" ________________________________ [N] prefix controls [N]avigation

nnoremap n <Nop>
nnoremap nn n

nnoremap nd gD
vnoremap nd <Esc>gD
nnoremap <A-n>k G
nnoremap <A-n>i gg

if has('ide')

    map nc <Action>(GotoClass)
    map nf <Action>(GotoFile)
    map ns <Action>(GotoSymbol)

    map nd <Action>(GotoDeclaration)
    map nD <Action>(GotoTypeDeclaration)
    map ni <Action>(GotoImplementation)

    map nS <Action>(GotoSuperMethod)
    map nl <Action>(GotoLine)

    map nr <Action>(GotoRelated)
    map nt <Action>(GotoTest)

    map nu <Action>(ShowUsages)

endif

""" ________________________________ [M] prefix controls [M]ove

" All - move quote
nnoremap mq /"<CR>vi"
vnoremap mq /"<CR><Esc>/"<CR>vi"
nnoremap msq ?"<CR>vi"
vnoremap msq ?"<CR><Esc>?"<CR>nvi"

" All - move function call
nnoremap mf /(<CR>vi)
vnoremap mf o<Esc>/(<CR>vi(
nnoremap msf ?)<CR>vi)
vnoremap msf o<Esc>?)<CR>vi(

" All - move curly
nnoremap ma /{<CR>zovi}
vnoremap ma o<Esc>/{<CR>zovi}
nnoremap msa ?}<CR>vi}
vnoremap msa <Esc>?{<CR>nvi}

" ms is being used by something
nnoremap mz /.class/b-2<CR>viw
vnoremap mz <Esc>/.class/b-2<CR>viw


" All - next angle
nnoremap m> /><CR>vi>
vnoremap m> <Esc>/><CR>nvi>
nnoremap m< ?><CR>vi>
vnoremap m< <Esc>?><CR>vi>

" All - seek ahead camel case
nnoremap me ]w[bv]w
vnoremap me <Esc>]w[bv]w

nnoremap mE [bv]w
nnoremap vie ]wv[b

" All - move punctuation
nnoremap m, v/,/e-1<CR>
vnoremap m, /,/e-1<CR>

nnoremap m. v/\./e-1<CR>
vnoremap m. /\./e-1<CR>

nnoremap m; v/;<CR>
vnoremap m; /;<CR>

" All - move [list]
nnoremap ml /]<CR>vi[
vnoremap ml /]<CR><Esc>nvi[
nnoremap msl ?]<CR>vi[
vnoremap msl /[<CR><Esc>nvi[

""" Java move var
nnoremap mv /=/e-1<CR>v^
vnoremap mv <Esc>/=/e-1<CR>nv^
nnoremap msv ?=?e-1<CR>v^
vnoremap msv <Esc>?=?e-1<CR>v^

""" Java move definition
nnoremap md /= \+/e1<CR>v/;/b-1<CR>
vnoremap md o<Esc>/= \+/e1<CR>v/;/b-1<CR>
nnoremap msd ?= \+?e1<CR>v/;/v-1<CR>
vnoremap msd o<Esc>?= \+?e1<CR>v/;/v-1<CR>

""" Java move method call - cant use mc because of multicursor remaps.
nnoremap mm /\S(/e-1<CR>v?\v[ ()=.]?e+1<CR>o
vnoremap mm <Esc>/\S(/e-1<CR>v?\v[ ()=.]?e+1<CR>o
nnoremap msm ?(?e-1<CR>vBo
vnoremap msm <Esc>?(?e-1<CR>vBo

""" Move next literal number
nnoremap mn /[0-9]\+/<CR>viw
vnoremap mn <Esc>/[0-9]\+/<CR>viw
nnoremap msn ?[0-9]\+?<CR>viw
nnoremap msn <Esc>?[0-9]\+?<CR>viw

nnoremap mo v%


""" ________________________________

""" Experimental -----------------------------------------

nnoremap daa da>
nnoremap dia di>
nnoremap vaa va>
nnoremap via vi>

nnoremap <leader>jj $h"ayiw^i@JsonProperty("<Esc>"apli")<Space><Esc>
"""vmap <leader>c <Plug>(multicursor-mc0)

if has('ide')
    set multicursor
    vmap <leader>l <Plug>(multicursor-ms0)
    nmap <leader>c <Plug>(multicursor-mc/)
endif


nnoremap <leader>jj $h"ayiw^i@JsonProperty("<Esc>"apli")<Space><Esc>
nnoremap <leader>vim :e ~/.ideavimrc<CR>


noremap Q q
noremap am @
noremap a. @@

if has('ide')
    map <leader>wr <Action>(IdeaVim.ReloadVimRc.reload)
else
    nnoremap <leader>wr :w<CR>:source ~\.ideavimrc<CR>
endif


lua << EOF

require "init.mac"

EOF

