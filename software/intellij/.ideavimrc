let mapleader=" "

set showmode
set visualbell
set number
set relativenumber
set ruler


set wrapscan
set incsearch
set smartcase

"""set hlsearch

"""set maxmapdepth
"""set history

set scroll=0
set scrolloff=0
set scrolljump=5
"""set startofline

"""set keymodel="startsel,stopsel"
"""set selection='inclusive'
"""set selectmode=""

set clipboard+=unnamed
"""set digraph
"""set iskeyword

if has('ide')
    set ideamarks
    set ideajoin
    set idearefactormode=select
    set ideavimsupport=""
endif

sethandler <ESC> a:ide
sethandler <C-x> a:ide
sethandler <A-F> a:ide
sethandler <A-S> a:ide
sethandler <A-f> a:ide
sethandler <C-I> a:ide
sethandler <C-B> a:ide
sethandler <C-L> a:ide
sethandler <A-N> a:ide
sethandler <C-P> a:ide
sethandler <C-R> a:ide
sethandler <C-U> a:ide
sethandler <A-X> a:ide
sethandler <C-\> a:ide
sethandler <M-F> a:ide
sethandler <M-n> a:ide
sethandler <C-w> a:ide
sethandler <C-D> a:ide
sethandler <C-c> a:ide
sethandler <C-s> a:ide
sethandler <C-]> a:ide
sethandler <C-[> a:ide
sethandler <C-v> a:ide
sethandler <C-A> a:ide



""" Plugins  --------------------------------------------------------------

Plug 'easymotion/vim-easymotion'
let g:EasyMotion_do_mapping = 0

map fr :s/
vmap fr :s/
map <leader>fr &
map fq <Plug>(easymotion-bd-jk)
map fl <Plug>(easymotion-w)
map fj <Plug>(easymotion-b)
map f<Space> <Plug>(easymotion-bd-t)
map <leader>ff <Action>(Find)

"""Plug 'dbakker/vim-paragraph-motion'
    ""Normally the { and } motions only match completely empty lines.
    """With this plugin lines that only contain whitespace are also matched.


Plug 'tpope/vim-surround' """Commands: ys, cs, ds, S

Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = "1000"
let g:highlightedyank_highlight_color = "rgba(100, 160, 100, 100)"

Plug 'michaeljsmith/vim-indent-object' """Additional text objects: ai, ii, aI
packadd matchit

Plug 'tommcdo/vim-exchange' """Commands: cx, cxx, X, cxc

Plug 'vim-scripts/argtextobj.vim' """Additional text objects: aa, ia
let g:argtextobj_pairs="[:],(:),<:>"

"""Plug 'preservim/nerdtree'
set multicursor


"""quickscope

endif


""" Overrides ------------------------------------------------ 

"""search

nnoremap fu :set invhlsearch<CR>
nnoremap fk *
nnoremap fi #
nnoremap ff f
nnoremap f. n.

"""redo
nnoremap <leader>. @@
vnoremap . <Esc>`<@@



""" end of Word / CamelCase
vnoremap ee e
vnoremap ei `>A

nnoremap ee e
nnoremap ei ea
nnoremap ea ea
nnoremap ai a
nnoremap cie ciw

""" mark
nnoremap mm ma

"""change / delete
vnoremap p "ad<Esc>p
nnoremap <Del> "adl
nnoremap <C-Del> "adw

vnoremap <Del> "ad
vnoremap <C-Del> "ad

nnoremap <Backspace> "adh
nnoremap <C-Backspace> "adb
vnoremap <Backspace> "adh
nnoremap cl "act
nnoremap cj "acT
nnoremap ck "acl
nnoremap dl "adt
nnoremap dj "adT
vnoremap <Backspace> "ad
nnoremap vk v

""" till
nnoremap D "adt
nnoremap C "act
nnoremap DD "aD
nnoremap V vt
nnoremap vv V
nnoremap viv g^vg_

nnoremap dip "adipO<Esc>
nnoremap <Tab> >>gv
nnoremap <S-Tab> <<gv
vnoremap <Tab> >>gv

nnoremap <Enter> i<Enter><ESC>


""" Extend-Layer ------
nnoremap i <Nop>
nnoremap a <Nop>

nnoremap <leader>i i
nnoremap <leader>a a
vnoremap <leader>i <Esc>i
vnoremap <leader>a <Esc>a
nnoremap i k
nnoremap k j
nnoremap j h
nnoremap h g^
nnoremap ç g$


nnoremap <Home> g^
nnoremap <C-Home> g^
nnoremap <C-S-Home> v^
nnoremap <S-Home> v^

nnoremap <End> g$
nnoremap <C-End> g$
nnoremap <C-S-End> v$
nnoremap <S-End> v$


nnoremap <S-Up> vk
nnoremap <S-Right> vl
nnoremap <S-Down> vj
nnoremap <S-Left> vh

inoremap <Home> <Esc>^i
inoremap <C-Home> <Esc>^i
inoremap <C-S-Home> <Esc>vg^
inoremap <S-Home> <Esc>vg^

inoremap <End> <Esc>$a
inoremap <C-End> <Esc>$a
inoremap <C-S-End> <Esc>lv$a
inoremap <S-End> <Esc>lv$

inoremap <S-Up> <Esc>vk
inoremap <S-Right> <Esc>vl
inoremap <S-Down> <Esc>vj
inoremap <S-Left> <Esc>vh


vnoremap <Home> ^
vnoremap <C-Home> ^
vnoremap <C-S-Home> ^
vnoremap <S-Home> ^

vnoremap <End> $
vnoremap <C-End> $
vnoremap <C-S-End> $
vnoremap <S-End> $


"""vnoremap <Up> k
"""vnoremap <Down> j
"""vnoremap <Left> h
"""vnoremap <Right> l
vnoremap <S-Up> k
vnoremap <S-Down> j
vnoremap <S-Left> h
vnoremap <S-Right> l

""" -------------------------------------------------------

""" Code ----
nnoremap zz zz
nnoremap zi zb
vnoremap zi zb
nnoremap zk zt
vnoremap zk zt
nnoremap zl zL
nnoremap zj zH


nnoremap x <Nop>
nnoremap x. zo
nnoremap x, zc
nnoremap x0 zM
nmap xx kxx
vmap xx <Plug>(Exchange)

if has('ide')
    
    map xc <Action>(CommentByLineComment)
    map xo <Action>(OverrideMethods)
    map x1 <Action>(ExpandAllToLevel1)
    map x2 <Action>(ExpandAllToLevel2)
    map x3 <Action>(ExpandAllToLevel3)
    map xt <Action>(ImplementMethods)
    map xi <Action>(MethodUp)
    map xk <Action>(MethodDown)
    map xj <Action>(HippieCompletion)
    map xl <Action>(HippieBackwardCompletion)
else
    nnoremap xi [m
    nnoremap xk ]m
endif


""" Surround ----
nnoremap s <Nop>


""" Remove generic
nnoremap so vi<"ay/><CR>v?\<<CR>B"ap

""" Add generic
nmap sqo viwS><leader>iOptional
vmap sqo S><leader>iOptional
nmap sql viwS><leader>iList
vmap sql wS><leader>iList

nmap sfl viwS)<leader>iCollections.singletonList
vmap sfl S)<leader>iCollections.singletonList


if has('ide')
    map st <Action>(InsertLiveTemplate)
    map ss <Action>(SurroundWith)
    map su <Action>(Unwrap)
    map si <Action>(EditorSelectWord)
    map sk <Action>(EditorUnSelectWord) 
endif

""" select all scope
nnoremap vsa va}
nnoremap vsi vi}
nnoremap vss Va}g$og^



""" Refactoring ----
nnoremap r <Nop>



if has('ide')

    map r<Del> <Action>(SafeDelete)
    map ra <Action>(IntroduceField)
    map rd <Action>(EditorDuplicate)
    map rf <Action>(ExtractMethod)
    map ri <Action>(Inline)
    map rj <Action>(EditorJoinLines)
    map rk <Action>(IntroduceConstant)
    map rm <Action>(Move)
    map rn <Action>(RenameElement)
    map ro <Action>(OptimizeImports)
    map rr <Action>(ReformatCode)
    map rsi <Action>(ChangeSignature)
    map rt <Action>(MembersPullUp)
    map ru <Action>(EditorToggleCase)
    map rv <Action>(IntroduceVariable)

else
   nnoremap rj J
    nnoremap rr gq
    vnoremap rr gq
endif

nnoremap rsp vip:sort i<CR>
nnoremap rsP vip:sort! i<CR>

""" Quick commands --------------------------
nnoremap q <Nop>

nnoremap qq <Esc>
nnoremap qu {
nnoremap qp }
vnoremap qu {
vnoremap qp }

nnoremap qd K

nnoremap qe zz
nnoremap qi <C-U>
nnoremap qk <C-D>
map qo <Plug>(MatchitMotion)

if has('ide')
    map qw <Action>(ShowErrorDescription)
    map qh <Action>(GotoPreviousError)
    map qç <Action>(GotoNextError)
    map ql <Action>(Forward)
    map qj <Action>(Back)
else
    nnoremap ql <C-I>
    nnoremap qj <C-O>
endif

""" Window / Open
nnoremap o <Nop>
vnoremap o <Nop>

nnoremap oi O
nnoremap ok o
vnoremap oi O
vnoremap ok o

nnoremap <leader>vim :e ~\.ideavimrc<CR>
map <leader>wr <Action>(IdeaVim.ReloadVimRc.reload)
map <leader>w<A-p> <Action>(SelectInProjectView)
map <leader>wp <Action>(ActivateProjectToolWindow)
map or <Action>(RecentFiles)

map ox <Action>(FileStructurePopup)
map oh <Action>(CallHierarchy)
""" Navigation
nnoremap n <Nop>

nnoremap nn n
nnoremap nd gD
if has('ide')
    map nf <Action>(GotoFile)
    map nc <Action>(GotoClass)
    map ns <Action>(GotoSymbol)
    map nj <Action>(JumpToLastChange)
    map nl <Action>(JumpToLastChange)
    map ni <Action>(GotoImplementation)
    map nu <Action>(ShowUsages)
endif



""" Seek Aheads -------------------------------------------

""" next quote
nnoremap mq /"<CR>vi"
vnoremap mq /"<CR>n
nnoremap mQ ?"<CR>vi"
vnoremap mQ ?"<CR>N


""" next paren
nnoremap mp /(<CR>vi(
nnoremap mP ?)<CR>vi(
vnoremap mp <Esc>/(<CR>vi(
vnoremap mP <Esc>?)<CR>vi(

""" next semicolon
nnoremap mç v/;<CR>
nnoremap mh v?;<CR>
vnoremap mç /;<CR>
vnoremap mh ?;<CR>

""" next var
nnoremap ml /=<CR>g^v/=<CR>
nnoremap mj ?=<CR>vg^
vnoremap ml /=<CR>
vnoremap mj ?=<CR>

"""next whitespace
nnoremap mw v/\s\+<CR>
vnoremap mw /\s\+<CR>

""" Experimental -----------------------------------------

""" seek ahead: next curly
nnoremap mA ?{<CR>vi}
nnoremap ma /}<CR>vi}
vnoremap ma <Esc>/}<CR>nvi}
vnoremap mA <Esc>?{<CR>nvi}

nnoremap mG ?\<<CR>vi>
nnoremap mg /\<<CR>vi>
vnoremap mg <Esc>/\<<CR>nvi>
vnoremap mG <Esc>?\<<CR>nvi>

""" seek ahead camel case
nnoremap me [w
nnoremap mE [b
nnoremap vie :let @a="]wv[b"<CR>@a

""" seek ahead: next square
nnoremap mi /]<CR>vi[
nnoremap mI ?]<CR>vi[
vnoremap mi /]<CR><Esc>nvi[
vnoremap mI /[<CR><Esc>nvi[


""" next method
nnoremap mm :let @a="/)\rvqoB"<CR>@a
nnoremap mM :let @a="?/\rvqoB"<CR>@a

""" next callee
nnoremap mk /(<CR>qohb<Esc>
nnoremap mK ?)<CR>qohb<Esc>

""" next callee
nnoremap mf /return<CR>V
nnoremap mF ?return<CR>V

""""todo: next unmatched
""" todo: What exactly is a paragraph?
""" todo: What exactly is a sentence
""" todo: What exactly is a section
""" todo visual P swap





""" bring back
"""vnoremap <Leader>qj "ad``"aP
"""nnoremap <Leader>qj V"ad``"aP
"""nnoremap <Leader>ql magv"ad`a"aP

vnoremap rb :s/)\./)\r./g<CR>:action ReformatCode<CR>
nmap <leader>tc <Action>(Console.Transaction.Commit)
nmap <leader>tt <Action>(Console.Transaction.TxSettings)


nnoremap daa da>
nnoremap dia di>
nnoremap vaa va>
nnoremap via vi>

nmap <leader>q <Action>(ShowErrorDescription)
nnoremap <leader>jj $h"ayiw^i@JsonProperty("<Esc>"apli")<Space><Esc>  
"""vmap <leader>c <Plug>(multicursor-mc0)
map <leader>c <Plug>(multicursor-mc/)
vmap <leader>c <Plug>(multicursor-mc/)
vmap <leader>l <Plug>(multicursor-ms0)



"""map <leader>sl viW<Plug>(VSurround)<Esc>



