[
    {
        "key": "meta+alt+up",
        "command": "-editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+alt+down",
        "command": "-editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+i",
        "command": "-editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+k meta+c",
        "command": "-editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+d",
        "command": "-editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+oem_period",
        "command": "-editor.action.autoFix",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
    },
    {
        "key": "alt+o",
        "command": "-C_Cpp.SwitchHeaderSource",
        "when": "editorTextFocus && editorLangId == 'cpp'"
    },
    {
        "key": "alt+o",
        "command": "-C_Cpp.SwitchHeaderSource",
        "when": "editorTextFocus && editorLangId == 'c'"
    },
    {
        "key": "shift+alt+h",
        "command": "-references-view.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider"
    },
    {
        "key": "meta+k m",
        "command": "-workbench.action.editor.changeLanguageMode"
    },
    {
        "key": "meta+shift+w",
        "command": "-workbench.action.closeWindow"
    },
    {
        "key": "meta+insert",
        "command": "-editor.action.clipboardCopyAction"
    },
    {
        "key": "meta+d",
        "command": "-editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+down",
        "command": "-editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+up",
        "command": "-editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+u",
        "command": "-cursorUndo",
        "when": "textInputFocus"
    },
    {
        "key": "shift+delete",
        "command": "-editor.action.clipboardCutAction"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.continue",
        "when": "inDebugMode"
    },
    {
        "key": "shift+f9",
        "command": "-editor.debug.action.toggleInlineBreakpoint",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+s p",
        "command": "workbench.action.debug.pause",
        "when": "debugState == 'running'"
    },
    {
        "key": "f6",
        "command": "-workbench.action.debug.pause",
        "when": "debugState == 'running'"
    },
    {
        "key": "alt+s meta+s",
        "command": "workbench.action.debug.restart",
        "when": "inDebugMode"
    },
    {
        "key": "meta+shift+f5",
        "command": "-workbench.action.debug.restart",
        "when": "inDebugMode"
    },
    {
        "key": "meta+k meta+i",
        "command": "-editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.start",
        "when": "!inDebugMode"
    },
    {
        "key": "f10",
        "command": "-extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node'"
    },
    {
        "key": "alt+s alt+k",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "f11",
        "command": "-workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "shift+f11",
        "command": "-workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "alt+s right",
        "command": "workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f10",
        "command": "-workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "alt+b e",
        "command": "editor.debug.action.toggleBreakpoint",
        "when": "editorTextFocus"
    },
    {
        "key": "f9",
        "command": "-editor.debug.action.toggleBreakpoint",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+alt+backspace",
        "command": "editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "meta+shift+k",
        "command": "-editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "alt+s backspace",
        "command": "workbench.action.debug.stop",
        "when": "inDebugMode"
    },
    {
        "key": "shift+f5",
        "command": "-workbench.action.debug.stop",
        "when": "inDebugMode"
    },
    {
        "key": "alt+w meta+r",
        "command": "workbench.action.reloadWindow"
    },
    {
        "key": "meta+r",
        "command": "-workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "meta+shift+i",
        "command": "-workbench.action.toggleDevTools",
        "when": "isDevelopment"
    },
    {
        "key": "shift+alt+right",
        "command": "-editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+k c",
        "command": "-workbench.files.action.compareWithClipboard"
    },
    {
        "key": "meta+k d",
        "command": "-workbench.files.action.compareWithSaved"
    },
    {
        "key": "meta+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "meta+o",
        "command": "-workbench.action.files.openFile"
    },
    {
        "key": "shift+alt+r",
        "command": "-revealFileInOS",
        "when": "!editorFocus"
    },
    {
        "key": "meta+s",
        "command": "-workbench.action.files.save",
    },
    {
        "key": "meta+k s",
        "command": "-workbench.action.files.saveAll"
    },
    {
        "key": "meta+shift+s",
        "command": "-workbench.action.files.saveAs"
    },
    {
        "key": "meta+k meta+shift+s",
        "command": "-workbench.action.files.saveWithoutFormatting"
    },
    {
        "key": "alt+f f",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "actions.find",
            ]
        }
    },
    {
        "key": "meta+f",
        "command": "actions.find"
    },
    {
        "key": "meta+k meta+shift+c",
        "command": "-copyRelativeFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "meta+k e",
        "command": "-workbench.files.action.focusOpenEditorsView",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "key": "shift+alt+c",
        "command": "-copyFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "meta+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "meta+k meta+o",
        "command": "-workbench.action.files.openFolder"
    },
    {
        "key": "f3",
        "command": "-editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+f3",
        "command": "-editor.action.previousMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "meta+f3",
        "command": "-editor.action.nextSelectionMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "meta+shift+f3",
        "command": "-editor.action.previousSelectionMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "meta+shift+oem_period",
        "command": "-breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible"
    },
    {
        "key": "meta+shift+oem_4",
        "command": "-editor.fold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+k meta+0",
        "command": "-editor.foldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+k meta+oem_2",
        "command": "-editor.foldAllBlockComments",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+k meta+8",
        "command": "-editor.foldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+k meta+1",
        "command": "-editor.foldLevel1",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+k meta+2",
        "command": "-editor.foldLevel2",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+k meta+3",
        "command": "-editor.foldLevel3",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+k meta+4",
        "command": "-editor.foldLevel4",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+k meta+5",
        "command": "-editor.foldLevel5",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+k meta+6",
        "command": "-editor.foldLevel6",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+k meta+7",
        "command": "-editor.foldLevel7",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+k meta+oem_4",
        "command": "-editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+r r",
        "command": "editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorHasDocumentFormattingProvider && editorTextFocus"
    },
    {
        "key": "shift+alt+f",
        "command": "-editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
    },
    {
        "key": "shift+alt+f",
        "command": "-editor.action.formatDocument.none",
        "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorHasDocumentFormattingProvider && !editorReadonly"
    },
    {
        "key": "meta+k meta+f",
        "command": "-editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+k meta+r",
        "command": "-git.revertSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "meta+k meta+alt+s",
        "command": "-git.stageSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "meta+k meta+n",
        "command": "-git.unstageSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "shift+alt+f",
        "command": "-notebook.formatCell",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "alt+q left",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.navigateBack"
    },
    {
        "key": "alt+q right",
        "command": "workbench.action.navigateForward"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.navigateForward"
    },
    {
        "key": "meta+oem_6",
        "command": "editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+shift+oem_5",
        "command": "-editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+q meta+alt+k",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "alt+o q",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "meta+e",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "meta+p",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "meta+f12",
        "command": "-editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "meta+k meta+q",
        "command": "-workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "alt+n l",
        "command": "workbench.action.gotoLine"
    },
    {
        "key": "meta+g",
        "command": "-workbench.action.gotoLine"
    },
    {
        "key": "alt+q right",
        "command": "editor.action.diffReview.next",
        "when": "isInDiffEditor"
    },
    {
        "key": "f7",
        "command": "-editor.action.diffReview.next",
        "when": "isInDiffEditor"
    },
    {
        "key": "alt+e right",
        "command": "editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "alt+f8",
        "command": "-editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "alt+e meta+right",
        "command": "editor.action.marker.nextInFiles",
        "when": "editorFocus"
    },
    {
        "key": "f8",
        "command": "-editor.action.marker.nextInFiles",
        "when": "editorFocus"
    },
    {
        "key": "f4",
        "command": "-references-view.next",
        "when": "reference-list.hasResult"
    },
    {
        "key": "f7",
        "command": "-editor.action.wordHighlight.next",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "alt+q left",
        "command": "editor.action.diffReview.prev",
        "when": "isInDiffEditor"
    },
    {
        "key": "shift+f7",
        "command": "-editor.action.diffReview.prev",
        "when": "isInDiffEditor"
    },
    {
        "key": "alt+e left",
        "command": "editor.action.marker.prev",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+f8",
        "command": "-editor.action.marker.prev",
        "when": "editorFocus"
    },
    {
        "key": "shift+f8",
        "command": "-editor.action.marker.prevInFiles",
        "when": "editorFocus"
    },
    {
        "key": "shift+f4",
        "command": "-references-view.prev",
        "when": "reference-list.hasResult"
    },
    {
        "key": "shift+f7",
        "command": "-editor.action.wordHighlight.prev",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "shift+f12",
        "command": "-editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "escape",
        "command": "-workbench.action.hideInterfaceOverview",
        "when": "interfaceOverviewVisible"
    },
    {
        "key": "meta+k meta+r",
        "command": "-workbench.action.keybindingsReference"
    },
    {
        "key": "tab",
        "command": "editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly && !inSnippetMode"
    },
    {
        "key": "meta+oem_6",
        "command": "-editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+enter",
        "command": "editor.action.insertLineBefore",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+shift+enter",
        "command": "-editor.action.insertLineBefore",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+enter",
        "command": "editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+enter",
        "command": "-editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+b",
        "command": "-java.workspace.compile"
    },
    {
        "key": "shift+alt+u",
        "command": "-java.projectConfiguration.update",
        "when": "editorFocus"
    },
    {
        "key": "alt+j alt+e",
        "command": "-language-julia.changeCurrentEnvironment",
        "when": "editorTextFocus && editorLangId == 'julia'"
    },
    {
        "key": "meta+i meta+d",
        "command": "-language-julia.clearCurrentInlineResult",
        "when": "editorTextFocus && juliaHasInlineResult && !editorHasSelection && !findWidgetVisible && !inSnippetMode && !isInEmbeddedEditor && !markerNavigationVisible && !onTypeRenameInputVisible && !parameterHintsVisible && !renameInputVisible && !suggestWidgetVisible && editorLangId == 'julia'"
    },
    {
        "key": "meta+i meta+c",
        "command": "-language-julia.clearAllInlineResultsInEditor",
        "when": "editorTextFocus && editorLangId == 'julia'"
    },
    {
        "key": "shift+delete",
        "command": "-language-julia.plotpane-delete-all",
        "when": "jlplotpaneFocus"
    },
    {
        "key": "delete",
        "command": "-language-julia.plotpane-delete",
        "when": "jlplotpaneFocus"
    },
    {
        "key": "alt+enter",
        "command": "-language-julia.executeCodeBlockOrSelectionAndMove",
        "when": "editorTextFocus && editorLangId == 'julia'"
    },
    {
        "key": "shift+enter",
        "command": "-language-julia.executeCellAndMove",
        "when": "editorTextFocus && editorLangId == 'julia'"
    },
    {
        "key": "alt+j alt+m",
        "command": "-language-julia.chooseModule",
        "when": "editorTextFocus && editorLangId == 'julia'"
    },
    {
        "key": "meta+enter",
        "command": "-language-julia.executeJuliaCodeInREPL",
        "when": "editorTextFocus && editorLangId == 'julia'"
    },
    {
        "key": "meta+enter",
        "command": "-language-julia.executeJuliaCodeInREPL",
        "when": "editorTextFocus && editorLangId == 'juliamarkdown'"
    },
    {
        "key": "home",
        "command": "-language-julia.plotpane-first",
        "when": "jlplotpaneFocus"
    },
    {
        "key": "end",
        "command": "-language-julia.plotpane-last",
        "when": "jlplotpaneFocus"
    },
    {
        "key": "right",
        "command": "-language-julia.plotpane-next",
        "when": "jlplotpaneFocus"
    },
    {
        "key": "pagedown",
        "command": "-language-julia.plotpane-next",
        "when": "jlplotpaneFocus"
    },
    {
        "key": "left",
        "command": "-language-julia.plotpane-previous",
        "when": "jlplotpaneFocus"
    },
    {
        "key": "up",
        "command": "-language-julia.plotpane-previous",
        "when": "jlplotpaneFocus"
    },
    {
        "key": "pageup",
        "command": "-language-julia.plotpane-previous",
        "when": "jlplotpaneFocus"
    },
    {
        "key": "meta+l alt+b",
        "command": "-latex-workshop.build",
        "when": "config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+alt+b",
        "command": "-latex-workshop.build",
        "when": "!config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l alt+c",
        "command": "-latex-workshop.clean",
        "when": "config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+alt+c",
        "command": "-latex-workshop.clean",
        "when": "!config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l oem_6",
        "command": "-latex-workshop.demote-sectioning",
        "when": "config.latex-workshop.bind.altKeymap.enabled && editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+alt+oem_6",
        "command": "-latex-workshop.demote-sectioning",
        "when": "editorTextFocus && !config.latex-workshop.bind.altKeymap.enabled && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l oem_4",
        "command": "-latex-workshop.promote-sectioning",
        "when": "config.latex-workshop.bind.altKeymap.enabled && editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+alt+oem_4",
        "command": "-latex-workshop.promote-sectioning",
        "when": "editorTextFocus && !config.latex-workshop.bind.altKeymap.enabled && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l alt+j",
        "command": "-latex-workshop.synctex",
        "when": "config.latex-workshop.bind.altKeymap.enabled && editorTextFocus && editorLangId == 'latex'"
    },
    {
        "key": "meta+alt+j",
        "command": "-latex-workshop.synctex",
        "when": "editorTextFocus && !config.latex-workshop.bind.altKeymap.enabled && editorLangId == 'latex'"
    },
    {
        "key": "meta+l alt+v",
        "command": "-latex-workshop.view",
        "when": "config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+alt+v",
        "command": "-latex-workshop.view",
        "when": "!config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+shift+v",
        "command": "-markdown.showPreview",
        "when": "editorLangId == 'markdown'"
    },
    {
        "key": "meta+k meta+d",
        "command": "-editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "alt+e right",
        "command": "workbench.action.editor.nextChange",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+f5",
        "command": "-workbench.action.editor.nextChange",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+e left",
        "command": "workbench.action.editor.previousChange",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+f5",
        "command": "-workbench.action.editor.previousChange",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+shift+n",
        "command": "-workbench.action.newWindow"
    },
    {
        "key": "meta+alt+b",
        "command": "-nim.check",
        "when": "editorLangId == 'nim'"
    },
    {
        "key": "f6",
        "command": "-nim.run.file",
        "when": "editorLangId == 'nim'"
    },
    {
        "key": "shift+enter",
        "command": "-nim.execSelectionInTerminal",
        "when": "editorFocus && !findInputFocussed && !replaceInputFocussed && editorLangId == 'nim'"
    },
    {
        "key": "meta+l",
        "command": "-notebook.centerActiveCell",
        "when": "notebookEditorFocused"
    },
    {
        "key": "y",
        "command": "-notebook.cell.changeToCode",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "m",
        "command": "-notebook.cell.changeToMarkdown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "meta+c",
        "command": "-notebook.cell.copy",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "c",
        "command": "-notebook.cell.copy",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "shift+alt+down",
        "command": "-notebook.cell.copyDown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "shift+alt+up",
        "command": "-notebook.cell.copyUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "meta+x",
        "command": "-notebook.cell.cut",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "x",
        "command": "-notebook.cell.cut",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "delete",
        "command": "-notebook.cell.delete",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "d d",
        "command": "-notebook.cell.delete",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "enter",
        "command": "-notebook.cell.edit",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "meta+alt+enter",
        "command": "-notebook.cell.execute",
        "when": "notebookEditorFocused"
    },
    {
        "key": "alt+enter",
        "command": "-notebook.cell.executeAndInsertBelow",
        "when": "notebookEditorFocused"
    },
    {
        "key": "shift+enter",
        "command": "-notebook.cell.executeAndSelectBelow",
        "when": "notebookEditorFocused"
    },
    {
        "key": "meta+home",
        "command": "-notebook.focusTop",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "meta+down",
        "command": "-notebook.cell.focusInOutput",
        "when": "notebookCellHasOutputs && notebookEditorFocused"
    },
    {
        "key": "meta+end",
        "command": "-notebook.focusBottom",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "down",
        "command": "-notebook.focusNextEditor",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
    },
    {
        "key": "meta+down",
        "command": "-notebook.focusNextEditor",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "meta+up",
        "command": "-notebook.cell.focusOutOutput",
        "when": "notebookEditorFocused"
    },
    {
        "key": "up",
        "command": "-notebook.focusPreviousEditor",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
    },
    {
        "key": "left",
        "command": "-notebook.fold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "shift+alt+f",
        "command": "-notebook.format",
        "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "meta+shift+enter",
        "command": "-notebook.cell.insertCodeCellAbove",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "a",
        "command": "-notebook.cell.insertCodeCellAbove",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "meta+enter",
        "command": "-notebook.cell.insertCodeCellBelow",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "b",
        "command": "-notebook.cell.insertCodeCellBelow",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+down",
        "command": "-notebook.cell.moveDown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+up",
        "command": "-notebook.cell.moveUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "meta+v",
        "command": "-notebook.cell.paste",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "v",
        "command": "-notebook.cell.paste",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "meta+shift+v",
        "command": "-notebook.cell.pasteAbove",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "meta+shift+z",
        "command": "-notebook.redo",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "meta+shift+oem_minus",
        "command": "-notebook.cell.split",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused"
    },
    {
        "key": "escape",
        "command": "-notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && !editorHasSelection && !editorHoverVisible"
    },
    {
        "key": "meta+z",
        "command": "-notebook.undo",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "z",
        "command": "-notebook.undo",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "right",
        "command": "-notebook.unfold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "numpad_add",
        "command": "editor.action.onTypeRename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+shift+f2",
        "command": "-editor.action.onTypeRename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+k f12",
        "command": "-editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "meta+shift+c",
        "command": "-workbench.action.terminal.openNativeConsole",
        "when": "!terminalFocus"
    },
    {
        "key": "alt+r o",
        "command": "editor.action.organizeImports",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
    },
    {
        "key": "shift+alt+o",
        "command": "-editor.action.organizeImports",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
    },
    {
        "key": "shift+tab",
        "command": "editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly && !inSnippetMode"
    },
    {
        "key": "meta+oem_4",
        "command": "-editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+insert",
        "command": "-editor.action.clipboardPasteAction"
    },
    {
        "key": "shift+alt+h",
        "command": "-editor.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor"
    },
    {
        "key": "alt+a up",
        "command": "editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "alt+f12",
        "command": "-editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "meta+shift+f12",
        "command": "-editor.action.peekImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "meta+k meta+t",
        "command": "-workbench.action.selectTheme"
    },
    {
        "key": "meta+k meta+m",
        "command": "-workbench.extensions.action.showRecommendedKeymapExtensions"
    },
    {
        "key": "meta+k meta+s",
        "command": "-workbench.action.openGlobalKeybindings"
    },
    {
        "key": "meta+enter",
        "command": "-jupyter.runcurrentcell",
        "when": "editorTextFocus && jupyter.featureenabled && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "shift+enter",
        "command": "-jupyter.runcurrentcelladvance",
        "when": "editorTextFocus && jupyter.featureenabled && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "shift+enter",
        "command": "-jupyter.execSelectionInteractive",
        "when": "editorTextFocus && jupyter.featureenabled && jupyter.ownsSelection && !findInputFocussed && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "shift+enter",
        "command": "-python.execSelectionInTerminal",
        "when": "editorTextFocus && !findInputFocussed && !python.datascience.ownsSelection && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "shift+alt+enter",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+oem_period",
        "command": "-editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+alt+z",
        "command": "redo"
    },
    {
        "key": "meta+shift+z",
        "command": "-redo"
    },
    {
        "key": "meta+y",
        "command": "-redo"
    },
    {
        "key": "alt+r tab",
        "command": "editor.action.refactor",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+shift+r",
        "command": "-editor.action.refactor",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+f12",
        "command": "-references-view.find",
        "when": "editorHasReferenceProvider"
    },
    {
        "key": "shift+enter",
        "command": "-editor.refocusCallHierarchy",
        "when": "callHierarchyVisible"
    },
    {
        "key": "meta+k meta+u",
        "command": "-editor.action.removeCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+r n",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "f2",
        "command": "-editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "enter",
        "command": "repl.action.acceptInput",
        "when": "inDebugRepl && textInputFocus"
    },
    {
        "key": "meta+f",
        "command": "-repl.action.filter",
        "when": "inDebugRepl && textInputFocus"
    },
    {
        "key": "alt+f r",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "editor.action.startFindReplaceAction",
                "toggleFindInSelection"
            ]
        }
    },
    {
        "key": "meta+h",
        "command": "-editor.action.startFindReplaceAction"
    },
    {
        "key": "meta+shift+oem_period",
        "command": "-editor.action.inPlaceReplace.down",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+shift+oem_comma",
        "command": "-editor.action.inPlaceReplace.up",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+f5",
        "command": "-workbench.action.debug.run"
    },
    {
        "key": "alt+enter",
        "command": "-search.action.openInEditor",
        "when": "hasSearchResult && searchViewletFocus"
    },
    {
        "key": "meta+shift+r",
        "command": "-rerunSearchEditorSearch",
        "when": "inSearchEditor"
    },
    {
        "key": "meta+shift+f",
        "command": "-workbench.action.findInFiles"
    },
    {
        "key": "shift+enter",
        "command": "-search.action.focusPreviousSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "shift+f4",
        "command": "-search.action.focusPreviousSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "alt+f meta+r",
        "command": "workbench.action.replaceInFiles"
    },
    {
        "key": "meta+shift+h",
        "command": "-workbench.action.replaceInFiles"
    },
    {
        "key": "alt+f y",
        "command": "editor.action.selectHighlights",
        "when": "editorFocus"
    },
    {
        "key": "meta+shift+l",
        "command": "-editor.action.selectHighlights",
        "when": "editorFocus"
    },
    {
        "key": "alt+e shift+enter",
        "command": "editor.action.selectFromAnchorToCursor",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "key": "meta+k meta+k",
        "command": "-editor.action.selectFromAnchorToCursor",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "key": "alt+e shift+enter",
        "command": "editor.action.setSelectionAnchor",
        "when": "editorTextFocus && !selectionAnchorSet"
    },
    {
        "key": "meta+k meta+b",
        "command": "-editor.action.setSelectionAnchor",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+f1",
        "command": "-editor.action.showAccessibilityHelp",
        "when": "editorFocus"
    },
    {
        "key": "alt+o a",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "meta+shift+p",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "f1",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "shift+f10",
        "command": "-editor.action.showContextMenu",
        "when": "textInputFocus"
    },
    {
        "key": "meta+k meta+i",
        "command": "-editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+f3",
        "command": "-editor.action.dirtydiff.next",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+f3",
        "command": "-editor.action.dirtydiff.previous",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+shift+alt+down",
        "command": "editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+left",
        "command": "-editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+shift+b",
        "command": "-workbench.action.tasks.build"
    },
    {
        "key": "meta+shift+c",
        "command": "-workbench.action.terminal.copySelection",
        "when": "terminalFocus && terminalTextSelected"
    },
    {
        "key": "meta+shift+oem_3",
        "command": "-workbench.action.terminal.new"
    },
    {
        "key": "f3",
        "command": "-workbench.action.terminal.findNext",
        "when": "terminalFindFocused || terminalFocus"
    },
    {
        "key": "shift+enter",
        "command": "-workbench.action.terminal.findNext",
        "when": "terminalFindFocused"
    },
    {
        "key": "shift+f3",
        "command": "-workbench.action.terminal.findPrevious",
        "when": "terminalFindFocused || terminalFocus"
    },
    {
        "key": "enter",
        "command": "-workbench.action.terminal.findPrevious",
        "when": "terminalFindFocused"
    },
    {
        "key": "alt+f f",
        "command": "workbench.action.terminal.focusFind",
        "when": "terminalFindFocused || terminalFocus"
    },
    {
        "key": "meta+f",
        "command": "-workbench.action.terminal.focusFind",
        "when": "terminalFindFocused || terminalFocus"
    },
    {
        "key": "shift+tab",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus"
    },
    {
        "key": "alt+up",
        "command": "-workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus"
    },
    {
        "key": "meta+up",
        "command": "-workbench.action.terminal.navigationModeFocusPrevious",
        "when": "accessibilityModeEnabled && terminalA11yTreeFocus || accessibilityModeEnabled && terminalFocus"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus"
    },
    {
        "key": "shift+escape",
        "command": "-workbench.action.terminal.hideFind",
        "when": "terminalFindVisible && terminalFocus"
    },
    {
        "key": "meta+v",
        "command": "workbench.action.terminal.paste",
        "when": "terminalFocus"
    },
    {
        "key": "meta+shift+v",
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus"
    },
    {
        "key": "meta+v",
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus"
    },
    {
        "key": "shift+pagedown",
        "command": "-workbench.action.terminal.scrollDownPage",
        "when": "terminalFocus"
    },
    {
        "key": "meta+end",
        "command": "-workbench.action.terminal.scrollToBottom",
        "when": "terminalFocus"
    },
    {
        "key": "meta+home",
        "command": "-workbench.action.terminal.scrollToTop",
        "when": "terminalFocus"
    },
    {
        "key": "meta+alt+pageup",
        "command": "-workbench.action.terminal.scrollUp",
        "when": "terminalFocus"
    },
    {
        "key": "shift+pageup",
        "command": "-workbench.action.terminal.scrollUpPage",
        "when": "terminalFocus"
    },
    {
        "key": "meta+shift+5",
        "command": "-workbench.action.terminal.split",
        "when": "terminalFocus"
    },
    {
        "key": "alt+c",
        "command": "-workbench.action.terminal.toggleFindCaseSensitive",
        "when": "terminalFindFocused || terminalFocus"
    },
    {
        "key": "alt+r",
        "command": "-workbench.action.terminal.toggleFindRegex",
        "when": "terminalFindFocused || terminalFocus"
    },
    {
        "key": "alt+w",
        "command": "-workbench.action.terminal.toggleFindWholeWord",
        "when": "terminalFindFocused || terminalFocus"
    },
    {
        "key": "shift+alt+a",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+h",
        "command": "-editor.toggleCallHierarchy",
        "when": "callHierarchyVisible"
    },
    {
        "key": "meta+k meta+l",
        "command": "-editor.toggleFold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+oem_2",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+oem_2",
        "command": "-editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+m",
        "command": "-editor.action.toggleTabFocusMode"
    },
    {
        "key": "meta+l meta+m",
        "command": "-editor.action.toggleTabFocusMode",
        "when": "textInputFocus && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "alt+q p",
        "command": "editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "meta+shift+space",
        "command": "-editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "alt+d enter",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "meta+space",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "meta+k meta+x",
        "command": "-editor.action.trimTrailingWhitespace",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+shift+oem_6",
        "command": "-editor.unfold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+k meta+j",
        "command": "-editor.unfoldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+k meta+9",
        "command": "-editor.unfoldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+k meta+oem_6",
        "command": "-editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+k meta+shift+w",
        "command": "-workbench.action.closeAllGroups"
    },
    {
        "key": "meta+k meta+w",
        "command": "-workbench.action.closeAllEditors"
    },
    {
        "key": "meta+k w",
        "command": "-workbench.action.closeEditorsInGroup"
    },
    {
        "key": "meta+k u",
        "command": "-workbench.action.closeUnmodifiedEditors"
    },
    {
        "key": "alt+w d",
        "command": "workbench.debug.action.toggleRepl"
    },
    {
        "key": "meta+shift+y",
        "command": "-workbench.debug.action.toggleRepl"
    },
    {
        "key": "alt+w up",
        "command": "workbench.action.focusAboveGroup"
    },
    {
        "key": "meta+k meta+up",
        "command": "-workbench.action.focusAboveGroup"
    },
    {
        "key": "alt+w down",
        "command": "workbench.action.focusBelowGroup"
    },
    {
        "key": "meta+k meta+down",
        "command": "-workbench.action.focusBelowGroup"
    },
    {
        "key": "meta+1",
        "command": "-workbench.action.focusFirstEditorGroup"
    },
    {
        "key": "meta+0",
        "command": "-workbench.action.focusSideBar"
    },
    {
        "key": "meta+k meta+left",
        "command": "-workbench.action.focusLeftGroup"
    },
    {
        "key": "alt+w right",
        "command": "workbench.action.focusNextPart"
    },
    {
        "key": "f6",
        "command": "-workbench.action.focusNextPart"
    },
    {
        "key": "alt+w left",
        "command": "workbench.action.focusPreviousPart",
    },
    {
        "key": "shift+f6",
        "command": "-workbench.action.focusPreviousPart"
    },
    {
        "key": "meta+k meta+right",
        "command": "-workbench.action.focusRightGroup"
    },
    {
        "key": "meta+k enter",
        "command": "-workbench.action.keepEditor"
    },
    {
        "key": "alt+w alt+down",
        "command": "workbench.action.moveActiveEditorGroupDown"
    },
    {
        "key": "meta+k down",
        "command": "-workbench.action.moveActiveEditorGroupDown"
    },
    {
        "key": "alt+w alt+left",
        "command": "workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "meta+k left",
        "command": "-workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "alt+w alt+right",
        "command": "workbench.action.moveActiveEditorGroupRight"
    },
    {
        "key": "meta+k right",
        "command": "-workbench.action.moveActiveEditorGroupRight"
    },
    {
        "key": "alt+w alt+up",
        "command": "workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "meta+k up",
        "command": "-workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "shift+alt+1",
        "command": "-workbench.action.moveEditorToFirstGroup"
    },
    {
        "key": "shift+alt+9",
        "command": "-workbench.action.moveEditorToLastGroup"
    },
    {
        "key": "meta+alt+right",
        "command": "-workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "meta+alt+left",
        "command": "-workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "meta+shift+pageup",
        "command": "-workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "meta+shift+pagedown",
        "command": "-workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "meta+9",
        "command": "-workbench.action.lastEditorInGroup"
    },
    {
        "key": "alt+0",
        "command": "-workbench.action.lastEditorInGroup"
    },
    {
        "key": "alt+m alt+l",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "meta+pagedown",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "meta+k meta+pagedown",
        "command": "-workbench.action.nextEditorInGroup"
    },
    {
        "key": "meta+k meta+pageup",
        "command": "-workbench.action.previousEditorInGroup"
    },
    {
        "key": "alt+w oem_plus",
        "command": "workbench.action.pinEditor",
        "when": "config.workbench.editor.showTabs && !editorSticky"
    },
    {
        "key": "meta+k shift+enter",
        "command": "-workbench.action.pinEditor",
        "when": "config.workbench.editor.showTabs && !editorSticky"
    },
    {
        "key": "meta+shift+tab",
        "command": "-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup"
    },
    {
        "key": "meta+tab",
        "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "meta+q",
        "command": "-workbench.action.quickOpenView"
    },
    {
        "key": "meta+shift+t",
        "command": "workbench.action.reopenClosedEditor"
    },
    {
        "key": "meta+shift+t",
        "command": "-workbench.action.reopenClosedEditor"
    },
    {
        "key": "meta+numpad0",
        "command": "-workbench.action.zoomReset"
    },
    {
        "key": "meta+k meta+p",
        "command": "-workbench.action.showAllEditors"
    },
    {
        "key": "meta+shift+e",
        "command": "-workbench.view.explorer"
    },
    {
        "key": "meta+shift+x",
        "command": "-workbench.view.extensions"
    },
    {
        "key": "meta+l alt+x",
        "command": "-workbench.view.extension.latex",
        "when": "config.latex-workshop.bind.altKeymap.enabled"
    },
    {
        "key": "meta+alt+x",
        "command": "-workbench.view.extension.latex",
        "when": "!config.latex-workshop.bind.altKeymap.enabled"
    },
    {
        "key": "meta+shift+d",
        "command": "-workbench.view.debug"
    },
    {
        "key": "meta+shift+g",
        "command": "-workbench.view.scm"
    },
    {
        "key": "meta+shift+f",
        "command": "-workbench.view.search",
        "when": "!searchViewletVisible"
    },
    {
        "key": "alt+w meta+l",
        "command": "workbench.action.splitEditor",
        "when": "editorFocus"
    },
    {
        "key": "meta+oem_5",
        "command": "-workbench.action.splitEditor"
    },
    {
        "key": "meta+k meta+oem_5",
        "command": "-workbench.action.splitEditorOrthogonal"
    },
    {
        "key": "f11",
        "command": "workbench.action.toggleFullScreen"
    },
    {
        "key": "f11",
        "command": "-workbench.action.toggleFullScreen"
    },
    {
        "key": "meta+oem_3",
        "command": "-workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "meta+shift+u",
        "command": "-workbench.action.output.toggleOutput"
    },
    {
        "key": "meta+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "alt+w e",
        "command": "workbench.actions.view.problems"
    },
    {
        "key": "meta+shift+m",
        "command": "-workbench.actions.view.problems"
    },
    {
        "key": "meta+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "shift+alt+0",
        "command": "-workbench.action.toggleEditorGroupLayout"
    },
    {
        "key": "alt+z",
        "command": "-editor.action.toggleWordWrap"
    },
    {
        "key": "meta+k z",
        "command": "-workbench.action.toggleZenMode"
    },
    {
        "key": "alt+w oem_plus",
        "command": "workbench.action.unpinEditor",
        "when": "config.workbench.editor.showTabs && editorSticky"
    },
    {
        "key": "meta+k shift+enter",
        "command": "-workbench.action.unpinEditor",
        "when": "config.workbench.editor.showTabs && editorSticky"
    },
    {
        "key": "meta+numpad_add",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "meta+shift+oem_plus",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "meta+oem_plus",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "meta+numpad_subtract",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "meta+shift+oem_minus",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "meta+oem_minus",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "meta+k f",
        "command": "-workbench.action.closeFolder"
    },
    {
        "key": "shift+tab",
        "command": "-acceptAlternativeSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus && textInputFocus"
    },
    {
        "key": "shift+enter",
        "command": "-acceptAlternativeSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus && textInputFocus"
    },
    {
        "key": "tab",
        "command": "acceptRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "enter",
        "command": "-acceptRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "alt+enter",
        "command": "acceptRenameInputWithPreview",
        "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible"
    },
    {
        "key": "shift+enter",
        "command": "-acceptRenameInputWithPreview",
        "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible"
    },
    {
        "key": "numpad_add",
        "command": "addCursorsAtSearchResults",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "meta+shift+l",
        "command": "-addCursorsAtSearchResults",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "meta+shift+oem_1",
        "command": "-breadcrumbs.focus",
        "when": "breadcrumbsPossible"
    },
    {
        "key": "meta+right",
        "command": "-breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "alt+enter",
        "command": "-latex-workshop.onAltEnterKey",
        "when": "acceptSuggestionOnEnter && editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "alt+enter",
        "command": "-latex-workshop.onAltEnterKey",
        "when": "editorTextFocus && !acceptSuggestionOnEnter && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "enter",
        "command": "-latex-workshop.onEnterKey",
        "when": "acceptSuggestionOnEnter && editorTextFocus && vim.active && !editorReadonly && !suggestWidgetVisible && vim.mode == 'Insert' && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "enter",
        "command": "-latex-workshop.onEnterKey",
        "when": "editorTextFocus && vim.active && !acceptSuggestionOnEnter && !editorReadonly && vim.mode == 'Insert' && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "enter",
        "command": "-latex-workshop.onEnterKey",
        "when": "acceptSuggestionOnEnter && editorTextFocus && !editorReadonly && !suggestWidgetVisible && !vim.active && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "enter",
        "command": "-latex-workshop.onEnterKey",
        "when": "editorTextFocus && !acceptSuggestionOnEnter && !editorReadonly && !vim.active && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l meta+e",
        "command": "-latex-workshop.shortcut.emph",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l meta+enter",
        "command": "-latex-workshop.shortcut.item",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+m meta+shift+b",
        "command": "-latex-workshop.shortcut.mathbb",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+m meta+b",
        "command": "-latex-workshop.shortcut.mathbf",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+m meta+c",
        "command": "-latex-workshop.shortcut.mathcal",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+m meta+i",
        "command": "-latex-workshop.shortcut.mathit",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+m meta+r",
        "command": "-latex-workshop.shortcut.mathrm",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+m meta+s",
        "command": "-latex-workshop.shortcut.mathsf",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+m meta+t",
        "command": "-latex-workshop.shortcut.mathtt",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l meta+b",
        "command": "-latex-workshop.shortcut.textbf",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l meta+i",
        "command": "-latex-workshop.shortcut.textit",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l meta+n",
        "command": "-latex-workshop.shortcut.textnormal",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l meta+r",
        "command": "-latex-workshop.shortcut.textrm",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l meta+c",
        "command": "-latex-workshop.shortcut.textsc",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l meta+s",
        "command": "-latex-workshop.shortcut.textsl",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l meta+oem_minus",
        "command": "-latex-workshop.shortcut.textsubscript",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l meta+6",
        "command": "-latex-workshop.shortcut.textsuperscript",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l meta+t",
        "command": "-latex-workshop.shortcut.texttt",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l meta+u",
        "command": "-latex-workshop.shortcut.underline",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+l meta+w",
        "command": "-latex-workshop.surround",
        "when": "editorHasSelection && editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "meta+shift+alt+up",
        "command": "-cursorColumnSelectUp",
        "when": "textInputFocus"
    },
    {
        "key": "right",
        "command": "-breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "meta+right",
        "command": "-breadcrumbs.focusNextWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "meta+left",
        "command": "-breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "left",
        "command": "-breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "meta+left",
        "command": "-breadcrumbs.focusPreviousWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "meta+enter",
        "command": "-breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "space",
        "command": "-breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "meta+enter",
        "command": "-breadcrumbs.revealFocusedFromTreeAside",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "down",
        "command": "-breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "meta+shift+oem_period",
        "command": "-breadcrumbs.toggleToOn",
        "when": "!config.breadcrumbs.enabled"
    },
    {
        "key": "shift+escape",
        "command": "-cancelOnTypeRenameInput",
        "when": "editorTextFocus && onTypeRenameInputVisible"
    },
    {
        "key": "shift+escape",
        "command": "-cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "shift+escape",
        "command": "-cancelSelection",
        "when": "editorHasSelection && textInputFocus"
    },
    {
        "key": "shift+escape",
        "command": "-closeAccessibilityHelp",
        "when": "accessibilityHelpWidgetVisible && editorFocus"
    },
    {
        "key": "shift+escape",
        "command": "-closeBreakpointWidget",
        "when": "breakpointWidgetVisible && textInputFocus"
    },
    {
        "key": "shift+escape",
        "command": "-closeDirtyDiff",
        "when": "dirtyDiffVisible"
    },
    {
        "key": "shift+escape",
        "command": "-closeFindWidget",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "shift+escape",
        "command": "-closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible"
    },
    {
        "key": "shift+escape",
        "command": "-closeParameterHints",
        "when": "editorFocus && parameterHintsVisible"
    },
    {
        "key": "shift+escape",
        "command": "-closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek"
    },
    {
        "key": "shift+escape",
        "command": "-closeReferenceSearch",
        "when": "referenceSearchVisible && !config.editor.stablePeek"
    },
    {
        "key": "alt+m alt+i",
        "command": "atlascode.views.jira.customJql.focus"
    },
    {
        "key": "alt+w e",
        "command": "workbench.panel.markers.view.focus"
    },
    {
        "key": "alt+w alt+t",
        "command": "workbench.panel.terminal.focus"
    },
    {
        "key": "alt+f meta+f",
        "command": "workbench.view.search.focus"
    },
    {
        "key": "numpad_add",
        "command": "workbench.debug.panel.action.clearReplAction"
    },
    {
        "key": "alt+r n",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "f2",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "numpad_add",
        "command": "workbench.action.gotoSymbol"
    },
    {
        "key": "meta+shift+o",
        "command": "-workbench.action.gotoSymbol"
    },
    {
        "key": "meta+k f2",
        "command": "-togglePeekWidgetFocus",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "f4",
        "command": "-search.action.focusNextSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "tab",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus"
    },
    {
        "key": "alt+down",
        "command": "-workbench.action.terminal.focusNextPane",
        "when": "terminalFocus"
    },
    {
        "key": "meta+down",
        "command": "-workbench.action.terminal.navigationModeFocusNext",
        "when": "accessibilityModeEnabled && terminalA11yTreeFocus || accessibilityModeEnabled && terminalFocus"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.terminal.focusNextPane",
        "when": "terminalFocus"
    },
    {
        "key": "meta+f4",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "meta+home",
        "command": "-cursorTop",
        "when": "textInputFocus"
    },
    {
        "key": "meta+end",
        "command": "-cursorBottom",
        "when": "textInputFocus"
    },
    {
        "key": "end",
        "command": "cursorEnd",
        "when": "textInputFocus"
    },
    {
        "key": "alt+end",
        "command": "cursorEnd",
        "when": "textInputFocus"
    },
    {
        "key": "shift+end",
        "command": "cursorEndSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+shift+end",
        "command": "cursorEndSelect",
        "when": "textInputFocus"
    },
    {
        "key": "home",
        "command": "cursorHome",
        "when": "textInputFocus"
    },
    {
        "key": "alt+home",
        "command": "cursorHome",
        "when": "textInputFocus"
    },
    {
        "key": "alt+shift+home",
        "command": "cursorHomeSelect",
        "when": "textInputFocus"
    },
    {
        "key": "meta+alt+left",
        "command": "cursorHome"
    },
    {
        "key": "meta+shift+alt+left",
        "command": "cursorHomeSelect"
    },
    {
        "key": "tab",
        "command": "-acceptSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "escape",
        "command": "-breadcrumbs.selectEditor",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "enter",
        "command": "-breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "alt+e enter",
        "command": "editor.action.toggleColumnSelection"
    },
    {
        "key": "meta+shift+alt+down",
        "command": "-cursorColumnSelectDown",
        "when": "textInputFocus"
    },
    {
        "key": "shift+down",
        "command": "-cursorColumnSelectDown",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "meta+shift+alt+left",
        "command": "-cursorColumnSelectLeft",
        "when": "textInputFocus"
    },
    {
        "key": "shift+left",
        "command": "-cursorColumnSelectLeft",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "meta+shift+alt+pagedown",
        "command": "-cursorColumnSelectPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "shift+pagedown",
        "command": "-cursorColumnSelectPageDown",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "meta+shift+alt+pageup",
        "command": "-cursorColumnSelectPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "shift+pageup",
        "command": "-cursorColumnSelectPageUp",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "meta+shift+alt+right",
        "command": "-cursorColumnSelectRight",
        "when": "textInputFocus"
    },
    {
        "key": "shift+right",
        "command": "-cursorColumnSelectRight",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+up",
        "command": "-cursorColumnSelectUp",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+delete",
        "command": "-deleteFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "shift+backspace",
        "command": "-deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "meta+k meta+k",
        "command": "-editor.action.defineKeybinding",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'jsonc'"
    },
    {
        "key": "alt+f f",
        "command": "editor.action.extensioneditor.showfind",
        "when": "editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "meta+f",
        "command": "-editor.action.extensioneditor.showfind",
        "when": "!editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "enter",
        "command": "-editor.action.webvieweditor.findNext",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "shift+enter",
        "command": "-editor.action.webvieweditor.findPrevious",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "escape",
        "command": "-editor.action.webvieweditor.hideFind",
        "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "meta+a",
        "command": "-editor.action.webvieweditor.selectAll",
        "when": "!editorFocus && !inputFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "meta+f",
        "command": "-editor.action.webvieweditor.showFind",
        "when": "!editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "f12",
        "command": "-editor.gotoNextSymbolFromResult",
        "when": "hasSymbols"
    },
    {
        "key": "meta+shift+l",
        "command": "-selectAllSearchEditorMatches",
        "when": "inSearchEditor"
    },
    {
        "key": "meta+shift+l",
        "command": "expandLineSelection",
        "when": "textInputFocus"
    },
    {
        "key": "meta+l",
        "command": "-expandLineSelection",
        "when": "textInputFocus"
    },
    {
        "key": "meta+l meta+l",
        "command": "-expandLineSelection",
        "when": "textInputFocus && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "shift+escape",
        "command": "-leaveSnippet",
        "when": "editorTextFocus && inSnippetMode"
    },
    {
        "key": "meta+k meta+k",
        "command": "-keybindings.editor.defineKeybinding",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "meta+k meta+e",
        "command": "-keybindings.editor.defineWhenExpression",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "alt+k",
        "command": "-keybindings.editor.recordSearchKeys",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "meta+shift+v",
        "command": "-java.action.clipboardPasteAction",
        "when": "javaLSReady && editorLangId == 'java'"
    },
    {
        "key": "f",
        "command": "-notebook.find",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+p",
        "command": "-keybindings.editor.toggleSortByPrecedence",
        "when": "inKeybindings"
    },
    {
        "key": "alt+m meta+s",
        "command": "workbench.action.openSettings2"
    },
    {
        "key": "alt+m meta+n",
        "command": "explorer.newFile",
        "when": "filesExplorerFocus"
    },
    {
        "key": "alt+m meta+n",
        "command": "workbench.action.files.newUntitledFile",
        "when": "!filesExplorerFocus && !editorFocus"
    },
    {
        "key": "alt+m meta+x",
        "command": "workbench.action.openGlobalKeybindings"
    },
    {
        "key": "meta+down",
        "command": "-scrollLineDown",
        "when": "textInputFocus"
    },
    {
        "key": "meta+up",
        "command": "-scrollLineUp",
        "when": "textInputFocus"
    },
    {
        "key": "shift+escape",
        "command": "-removeSecondaryCursors",
        "when": "editorHasMultipleSelections && textInputFocus"
    },
    {
        "key": "meta+shift+down",
        "command": "block-travel.selectDown",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+down",
        "command": "-block-travel.selectDown",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+shift+up",
        "command": "block-travel.selectUp",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+up",
        "command": "-block-travel.selectUp",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+down",
        "command": "-block-travel.jumpDown",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+up",
        "command": "-block-travel.jumpUp",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+up",
        "command": "cursorUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "meta+shift+up",
        "command": "-cursorUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+down",
        "command": "cursorDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "meta+shift+down",
        "command": "-cursorDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+e shift+backspace",
        "command": "editor.action.goToSelectionAnchor"
    },
    {
        "key": "escape",
        "command": "extension.jumpy-exit",
        "when": "jumpy.isJumpyMode"
    },
    {
        "key": "meta+down",
        "command": "-scroll-faster.down",
        "when": "textInputFocus"
    },
    {
        "key": "meta+up",
        "command": "-scroll-faster.up",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+r",
        "command": "-remote-wsl.revealInExplorer",
        "when": "editorFocus && remoteName == 'wsl'"
    },
    {
        "key": "meta+8",
        "command": "-workbench.action.focusEighthEditorGroup"
    },
    {
        "key": "meta+5",
        "command": "-workbench.action.focusFifthEditorGroup"
    },
    {
        "key": "meta+4",
        "command": "-workbench.action.focusFourthEditorGroup"
    },
    {
        "key": "meta+2",
        "command": "-workbench.action.focusSecondEditorGroup"
    },
    {
        "key": "meta+7",
        "command": "-workbench.action.focusSeventhEditorGroup"
    },
    {
        "key": "meta+6",
        "command": "-workbench.action.focusSixthEditorGroup"
    },
    {
        "key": "meta+3",
        "command": "-workbench.action.focusThirdEditorGroup"
    },
    {
        "key": "shift+escape",
        "command": "-workbench.action.hideComment",
        "when": "commentEditorFocused"
    },
    {
        "key": "escape",
        "command": "-workbench.action.hideComment",
        "when": "commentEditorFocused"
    },
    {
        "key": "escape",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "!editorFocus"
    },
    {
        "key": "alt+w t",
        "command": "workbench.action.terminal.focus"
    },
    {
        "key": "alt+w p",
        "command": "workbench.files.action.focusFilesExplorer"
    },
    {
        "key": "shift+down",
        "command": "-cursorDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "pagedown",
        "command": "-cursorPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "shift+pagedown",
        "command": "-cursorPageDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+k",
        "command": "cursorDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "pageup",
        "command": "-cursorPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "shift+pageup",
        "command": "-cursorPageUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+up",
        "command": "-cursorUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+i",
        "command": "cursorUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+j",
        "command": "cursorLeft",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+j",
        "command": "cursorLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "meta+left",
        "command": "-cursorWordAccessibilityLeft",
        "when": "accessibilityModeEnabled && textInputFocus"
    },
    {
        "key": "meta+shift+left",
        "command": "cursorWordAccessibilityLeftSelect",
        "when": "accessibilityModeEnabled && textInputFocus"
    },
    {
        "key": "meta+left",
        "command": "-cursorWordLeft",
        "when": "textInputFocus"
    },
    {
        "key": "meta+left",
        "command": "cursorWordLeft"
    },
    {
        "key": "meta+alt+j",
        "command": "-editor.action.insertSnippet",
        "when": "editorTextFocus && editorLangId == 'powershell'"
    },
    {
        "key": "meta+alt+j",
        "command": "-code-runner.runByLanguage"
    },
    {
        "key": "meta+alt+j",
        "command": "cursorWordLeft"
    },
    {
        "key": "meta+shift+alt+j",
        "command": "cursorWordLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "meta+shift+left",
        "command": "cursorWordLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+l",
        "command": "-toggleSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "alt+l",
        "command": "-toggleFindInSelection",
        "when": "editorFocus"
    },
    {
        "key": "alt+l",
        "command": "cursorRight",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+l",
        "command": "cursorRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "meta+right",
        "command": "-cursorWordAccessibilityRight",
        "when": "accessibilityModeEnabled && textInputFocus"
    },
    {
        "key": "meta+shift+right",
        "command": "cursorWordAccessibilityRightSelect",
        "when": "accessibilityModeEnabled && textInputFocus"
    },
    {
        "key": "meta+shift+left",
        "command": "cursorWordLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+i",
        "command": "cursorUp",
        "when": "textInputFocus"
    },
    {
        "key": "meta+alt+k",
        "command": "-code-runner.runCustomCommand"
    },
    {
        "key": "alt+h",
        "command": "cursorHome"
    },
    {
        "key": "shift+alt+h",
        "command": "-editor.showIncomingCalls",
        "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'"
    },
    {
        "key": "shift+alt+h",
        "command": "-editor.showOutgoingCalls",
        "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'"
    },
    {
        "key": "shift+alt+h",
        "command": "cursorHomeSelect"
    },
    {
        "key": "meta+shift+alt+[Semicolon]",
        "command": "cursorEndSelect"
    },
    {
        "key": "alt+[Semicolon]",
        "command": "cursorEnd"
    },
    {
        "key": "meta+shift+alt+right",
        "command": "cursorEndSelect"
    },
    {
        "key": "meta+alt+right",
        "command": "cursorEnd"
    },
    {
        "key": "alt+f alt+j",
        "command": "extension.jumpy-word",
        "when": "editorFocus"
    },
    {
        "key": "meta+alt+m",
        "command": "-code-runner.stop"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.start",
        "when": "debuggersAvailable && debugState != 'initializing'"
    },
    {
        "key": "f8",
        "command": "-PowerShell.RunSelection",
        "when": "editorTextFocus && editorLangId == 'powershell'"
    },
    {
        "key": "shift+alt+s",
        "command": "-PowerShell.ShowAdditionalCommands",
        "when": "editorTextFocus && editorLangId == 'powershell'"
    },
    {
        "key": "meta+alt+n",
        "command": "-code-runner.run"
    },
    {
        "key": "shift+f5",
        "command": "-workbench.action.debug.disconnect",
        "when": "focusedSessionIsAttach && inDebugMode"
    },
    {
        "key": "f10",
        "command": "-extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'"
    },
    {
        "key": "f11",
        "command": "-extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'"
    },
    {
        "key": "shift+f5",
        "command": "-workbench.action.debug.stop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "f9",
        "command": "-editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && editorTextFocus"
    },
    {
        "key": "meta+k o",
        "command": "-workbench.action.files.showOpenedFileInNewWindow",
        "when": "emptyWorkspaceSupport"
    },
    {
        "key": "meta+k meta+oem_minus",
        "command": "-editor.foldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "shift+alt+f",
        "command": "-editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
    },
    {
        "key": "shift+alt+f",
        "command": "-editor.action.formatDocument.none",
        "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
    },
    {
        "key": "meta+k meta+f",
        "command": "-editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "escape",
        "command": "-gettingStarted.goBack",
        "when": "inGettingStarted && activeEditor == 'gettingStartedPage'"
    },
    {
        "key": "right",
        "command": "-gettingStarted.next",
        "when": "inGettingStarted && activeEditor == 'gettingStartedPage'"
    },
    {
        "key": "down",
        "command": "-gettingStarted.next",
        "when": "inGettingStarted && activeEditor == 'gettingStartedPage'"
    },
    {
        "key": "left",
        "command": "-gettingStarted.prev",
        "when": "inGettingStarted && activeEditor == 'gettingStartedPage'"
    },
    {
        "key": "up",
        "command": "-gettingStarted.prev",
        "when": "inGettingStarted && activeEditor == 'gettingStartedPage'"
    },
    {
        "key": "f4",
        "command": "-references-view.next",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "shift+f4",
        "command": "-references-view.prev",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "meta+shift+v",
        "command": "-markdown.showPreview",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "y",
        "command": "-notebook.cell.changeToCode",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markdown'"
    },
    {
        "key": "m",
        "command": "-notebook.cell.changeToMarkdown",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'"
    },
    {
        "key": "alt+delete",
        "command": "-notebook.cell.clearOutputs",
        "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "meta+k meta+c",
        "command": "-notebook.cell.collapseCellInput",
        "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
    },
    {
        "key": "meta+k t",
        "command": "-notebook.cell.collapseCellOutput",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
    },
    {
        "key": "delete",
        "command": "-notebook.cell.delete",
        "when": "notebookEditable && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "enter",
        "command": "-notebook.cell.edit",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "meta+alt+enter",
        "command": "-notebook.cell.execute",
        "when": "notebookCellListFocused && notebookCellType == 'markdown' || notebookCellListFocused && notebookCellExecutionState == 'failed' || notebookCellExecutionState == 'idle' || notebookCellExecutionState == 'succeeded' && notebookKernelCount > 0"
    },
    {
        "key": "alt+enter",
        "command": "-notebook.cell.executeAndInsertBelow",
        "when": "notebookCellListFocused && notebookCellType == 'markdown' || notebookCellListFocused && notebookCellExecutionState == 'failed' || notebookCellExecutionState == 'idle' || notebookCellExecutionState == 'succeeded' && notebookKernelCount > 0"
    },
    {
        "key": "shift+enter",
        "command": "-notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && notebookCellType == 'markdown' || notebookCellListFocused && notebookCellExecutionState == 'failed' || notebookCellExecutionState == 'idle' || notebookCellExecutionState == 'succeeded' && notebookKernelCount > 0"
    },
    {
        "key": "shift+alt+win+j",
        "command": "-notebook.cell.joinAbove",
        "when": "notebookEditorFocused"
    },
    {
        "key": "down",
        "command": "-notebook.focusNextEditor",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
    },
    {
        "key": "up",
        "command": "-notebook.focusPreviousEditor",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
    },
    {
        "key": "meta+shift+oem_4",
        "command": "-notebook.fold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "meta+shift+enter",
        "command": "-notebook.cell.insertCodeCellAbove",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "meta+enter",
        "command": "-notebook.cell.insertCodeCellBelow",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "alt+win+j",
        "command": "-notebook.cell.joinBelow",
        "when": "notebookEditorFocused"
    },
    {
        "key": "meta+k meta+shift+oem_5",
        "command": "-notebook.cell.split",
        "when": "notebookCellEditable && notebookEditable && notebookEditorFocused"
    },
    {
        "key": "escape",
        "command": "-notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible"
    },
    {
        "key": "meta+shift+oem_6",
        "command": "-notebook.unfold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "meta+k t",
        "command": "-notebook.cell.expandCellOutput",
        "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
    },
    {
        "key": "meta+k meta+c",
        "command": "-notebook.cell.expandCellInput",
        "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
    },
    {
        "key": "meta+f",
        "command": "-settings.action.search",
        "when": "inSettingsEditor"
    },
    {
        "key": "left",
        "command": "-settings.action.focusTOC",
        "when": "inSettingsEditor && settingRowFocus"
    },
    {
        "key": "escape",
        "command": "-settings.action.focusLevelUp",
        "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch"
    },
    {
        "key": "shift+f9",
        "command": "-settings.action.showContextMenu",
        "when": "inSettingsEditor"
    },
    {
        "key": "shift+alt+f12",
        "command": "-references-view.findReferences",
        "when": "editorHasReferenceProvider"
    },
    {
        "key": "meta+shift+backspace",
        "command": "-search.searchEditor.action.deleteFileResults",
        "when": "inSearchEditor"
    },
    {
        "key": "alt+oem_plus",
        "command": "-increaseSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "alt+c",
        "command": "-toggleSearchEditorCaseSensitive",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+w",
        "command": "-toggleSearchEditorWholeWord",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+r",
        "command": "-toggleSearchEditorRegex",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+s enter",
        "command": "code-runner.run"
    },
    {
        "key": "alt+j alt+d",
        "command": "-language-julia.show-documentation",
        "when": "editorTextFocus && editorLangId == 'julia'"
    },
    {
        "key": "alt+j alt+o",
        "command": "-language-julia.startREPL"
    },
    {
        "key": "alt+j alt+k",
        "command": "-language-julia.stopREPL"
    },
    {
        "key": "meta+enter",
        "command": "language-julia.executeCell",
        "when": "editorLangId == 'julia'"
    },
    {
        "key": "meta+alt+h",
        "command": "cursorHome"
    },
    {
        "key": "meta+shift+alt+h",
        "command": "cursorHomeSelect"
    },
    {
        "key": "meta+alt+oem_1",
        "command": "cursorEnd"
    },
    {
        "key": "meta+shift+alt+oem_1",
        "command": "cursorEndSelect"
    },
    {
        "key": "alt+r d",
        "command": "editor.action.duplicateSelection"
    },
    {
        "key": "shift+alt+up",
        "command": "editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+shift+alt+k",
        "command": "editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+shift+down",
        "command": "editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+k",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible"
    },
    {
        "key": "down",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+i",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "up",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+f j",
        "command": "extension.jumpy-word",
        "when": "editorFocus"
    },
    {
        "key": "alt+f l",
        "command": "extension.jumpy-word",
        "when": "editorFocus"
    },
    {
        "key": "alt+f alt+l",
        "command": "extension.jumpy-word",
        "when": "editorFocus"
    },
    {
        "key": "alt+q w",
        "command": "editor.action.showHover"
    },
    {
        "key": "alt+q alt+i",
        "command": "editor.action.revealDeclaration"
    },
    {
        "key": "alt+q j",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "alt+q l",
        "command": "workbench.action.navigateForward"
    },
    {
        "key": "alt+q alt+j",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "alt+q alt+l",
        "command": "workbench.action.navigateForward"
    },
    {
        "key": "alt+o x",
        "command": "editor.action.inspectTMScopes"
    },
    {
        "key": "alt+s meta+enter",
        "command": "workbench.action.debug.start"
    },
    {
        "key": "alt+i",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "alt+j",
        "command": "list.collapse",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "alt+l",
        "command": "list.expand",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "right",
        "command": "-list.expand",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "right",
        "command": "list.expand",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "alt+q alt+enter",
        "command": "breadcrumbs.focusAndSelect"
    },
    {
        "key": "alt+j",
        "command": "breadcrumbs.focusPreviousWithPicker",
        "when": "breadcrumbsActive"
    },
    {
        "key": "alt+l",
        "command": "breadcrumbs.focusNextWithPicker",
        "when": "breadcrumbsActive"
    },
    {
        "key": "tab",
        "command": "breadcrumbs.selectFocused",
        "when": "breadcrumbsActive"
    },
    {
        "key": "alt+w backspace",
        "command": "extension.multiCommand.execute",
        "when": "!terminalFocus",
        "args": {
            "sequence": [
                "workbench.action.closeSidebar",
                "workbench.action.closeAuxiliaryBar",
                "workbench.action.closePanel",
                "notifications.clearAll"
            ]
        }
    },
    {
        "key": "alt+w m",
        "command": "extension.multiCommand.execute",
    },
    {
        "key": "alt+w s",
        "command": "workbench.view.debug"
    },
    {
        "key": "alt+s e",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.debug.action.focusCallStackView",
                "list.clear",
                "list.focusFirst",
                "list.select"
            ]
        }
    },
    {
        "key": "alt+s space",
        "command": "editor.debug.action.runToCursor"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "alt+q alt+k",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "alt+s alt+i",
        "command": "workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "meta+oem_1 meta+a",
        "command": "-testing.debugAll"
    },
    {
        "key": "meta+oem_1 meta+e",
        "command": "-testing.debugFailTests"
    },
    {
        "key": "meta+oem_1 meta+l",
        "command": "-testing.debugLastRun"
    },
    {
        "key": "meta+oem_1 meta+c",
        "command": "-testing.debugAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+oem_1 meta+f",
        "command": "-testing.debugCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+s alt+l",
        "command": "workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "alt+s w",
        "command": "workbench.debug.action.focusWatchView"
    },
    {
        "key": "alt+w enter",
        "command": "editor.debug.action.showDebugHover"
    },
    {
        "key": "alt+w tab",
        "command": "workbench.action.focusActivityBar"
    },
    {
        "key": "meta+oem_1 m",
        "command": "-jupyter.changeCellToMarkdown",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "meta+oem_1 d",
        "command": "-jupyter.moveCellsDown",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "meta+m",
        "command": "-markdown.extension.editing.toggleMath",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "shift+enter",
        "command": "-jupyter.notebookeditor.keybind.renderMarkdownAndSelectBelow",
        "when": "config.jupyter.enableKeyboardShortcuts && inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && notebookCellType == 'markup'"
    },
    {
        "key": "down",
        "command": "-workbench.banner.focusNextAction",
        "when": "bannerFocused"
    },
    {
        "key": "down",
        "command": "-workbench.statusBar.focusNext",
        "when": "statusBarFocused"
    },
    {
        "key": "up",
        "command": "-workbench.banner.focusPreviousAction",
        "when": "bannerFocused"
    },
    {
        "key": "shift+alt+p",
        "command": "-metaGo.inSurroundingPairSelection",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+p",
        "command": "-metaGo.changeSurroundingPair",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+oem_7",
        "command": "-metaGo.bookmark.toggle",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+oem_5",
        "command": "-metaGo.bookmark.view"
    },
    {
        "key": "alt+win+left",
        "command": "-metaGo.cursorSpaceWordLeft",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+win+backspace",
        "command": "-metaGo.cursorSpaceWordLeftDelete",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+win+left",
        "command": "-metaGo.cursorSpaceWordLeftSelect",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+win+right",
        "command": "-metaGo.cursorSpaceWordRight",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+win+delete",
        "command": "-metaGo.cursorSpaceWordRightDelete",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+win+right",
        "command": "-metaGo.cursorSpaceWordRightSelect",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+delete",
        "command": "-metaGo.metaJump.deleteToAfter",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+backspace",
        "command": "-metaGo.metaJump.deleteToBefore",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+d",
        "command": "-metaGo.metaJump.deleteToSmart",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+oem_period",
        "command": "-metaGo.gotoAfter"
    },
    {
        "key": "alt+oem_comma",
        "command": "-metaGo.gotoBefore"
    },
    {
        "key": "alt+end",
        "command": "-metaGo.gotoEmptyLineDown",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+oem_2",
        "command": "-metaGo.gotoSmart"
    },
    {
        "key": "meta+alt+oem_period",
        "command": "-metaGo.addCursorAfter"
    },
    {
        "key": "meta+alt+oem_comma",
        "command": "-metaGo.addCursorBefore"
    },
    {
        "key": "meta+alt+oem_2",
        "command": "-metaGo.addCursorSmart"
    },
    {
        "key": "alt+b",
        "command": "-metaGo.scrollCurrentLineToBottom",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+m",
        "command": "-metaGo.scrollCurrentLineToMiddle",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+t",
        "command": "-metaGo.scrollCurrentLineToTop",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+end",
        "command": "-metaGo.selectEmptyLineDown",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+home",
        "command": "-metaGo.gotoEmptyLineUp",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+home",
        "command": "-metaGo.selectEmptyLineUp",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+l",
        "command": "-metaGo.selectLineDown",
        "when": "textInputFocus"
    },
    {
        "key": "meta+o",
        "command": "-metaGo.selectLineUp",
        "when": "editorHasSelection && textInputFocus"
    },
    {
        "key": "shift+alt+oem_period",
        "command": "-metaGo.selectAfter",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+oem_comma",
        "command": "-metaGo.selectBefore",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+oem_2",
        "command": "-metaGo.selectSmart",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+a",
        "command": "-metaGo.selectionSwitchActiveWithAnchor",
        "when": "editorHasSelection && editorTextFocus"
    },
    {
        "key": "escape",
        "command": "-metaGo.input.cancel",
        "when": "editorTextFocus && metaGoInput"
    },
    {
        "key": "backspace",
        "command": "-metaGo.metaJump.backspace",
        "when": "editorTextFocus && metaGoJumping"
    },
    {
        "key": "alt+oem_6",
        "command": "-metaGo.bookmark.next",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+oem_4",
        "command": "-metaGo.bookmark.previous",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+win+backspace",
        "command": "-metaGo.cursorSpaceWordLeftSpaceDelete",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+win+home",
        "command": "-metaGo.cursorSpaceWordSpaceLeft",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+win+home",
        "command": "-metaGo.cursorSpaceWordSpaceLeftSelect",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+win+end",
        "command": "-metaGo.cursorSpaceWordSpaceRight",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+win+delete",
        "command": "-metaGo.cursorSpaceWordSpaceRightDelete",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+win+end",
        "command": "-metaGo.cursorSpaceWordSpaceRightSelect",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+alt+p",
        "command": "-metaGo.inSurroundingPairSelectionWithPairs",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+shift+oem_5",
        "command": "-metaGo.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+p",
        "command": "-projectManager.listProjects"
    },
    {
        "key": "meta+m meta+r",
        "command": "-regionfolder.wrapWithRegion",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+k meta+oem_plus",
        "command": "-editor.unfoldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "meta+shift+m meta+shift+r",
        "command": "-regionfolder.collapseDefault",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+q alt+oem_comma",
        "command": "editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+up",
        "command": "-extension.cursor-jump",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+down",
        "command": "-extension.cursor-jump",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+up",
        "command": "-extension.cursor-jump",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+down",
        "command": "-extension.cursor-jump",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+alt+k",
        "command": "-bookmarks.toggle",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+alt+l",
        "command": "-bookmarks.jumpToNext",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+alt+j",
        "command": "-bookmarks.jumpToPrevious",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+s",
        "command": "workbench.action.files.save"
    },
    {
        "key": "alt+down",
        "command": "partial.navigateCursor",
        "when": "textInputFocus",
        "args": {
            "ratio": 0.5
        }
    },
    {
        "key": "alt+meta+k",
        "command": "partial.navigateCursor",
        "when": "textInputFocus",
        "args": {
            "ratio": 0.5
        }
    },
    {
        "key": "alt+up",
        "command": "partial.navigateCursor",
        "when": "textInputFocus",
        "args": {
            "ratio": -0.5
        }
    },
    {
        "key": "alt+meta+i",
        "command": "partial.navigateCursor",
        "when": "textInputFocus",
        "args": {
            "ratio": -0.5
        }
    },
    {
        "key": "alt+q meta+alt+oem_comma",
        "command": "editor.foldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+q meta+alt+oem_period",
        "command": "editor.unfoldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+q alt+oem_period",
        "command": "editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+q oem_period",
        "command": "editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+q oem_comma",
        "command": "editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+r meta+s",
        "command": "editor.action.sortLinesAscending"
    },
    {
        "key": "alt+r u",
        "command": "editor.action.transformToLowercase"
    },
    {
        "key": "alt+oem_5",
        "command": "-editor.action.inlineSuggest.trigger",
        "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
    },
    {
        "key": "meta+enter",
        "command": "-github.copilot.generate",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+d meta+enter",
        "command": "editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionVisible && !editorTabMovesFocus"
    },
    {
        "key": "tab",
        "command": "-editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionVisible && !editorTabMovesFocus && !inlineSuggestionHasIndentation"
    },
    {
        "key": "tab",
        "command": "acceptSelectedSuggestion",
        "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
    },
    {
        "key": "meta+shift+right",
        "command": "cursorWordEndRightSelect",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "meta+alt+l",
        "command": "cursorWordRight"
    },
    {
        "key": "meta+shift+alt+l",
        "command": "cursorWordRightSelect"
    },
    {
        "key": "meta+oem_plus",
        "command": "editor.action.fontZoomIn"
    },
    {
        "key": "meta+oem_minus",
        "command": "editor.action.fontZoomOut"
    },
    {
        "key": "alt+q meta+alt+l",
        "command": "editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "alt+q meta+alt+j",
        "command": "editor.action.marker.prev",
        "when": "editorFocus"
    },
    {
        "key": "meta+alt+[Semicolon]",
        "command": "cursorEnd"
    },
    {
        "key": "meta+;",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+backspace",
        "command": "-paredit.killListBackward",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+c meta+alt+e",
        "command": "-calva.sendCurrentFormToOutputWindow",
        "when": "calva:connected  && !calva:outputWindowActive && editorLangId == 'clojure'"
    },
    {
        "key": "down",
        "command": "-workbench.action.interactivePlayground.arrowDown",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "alt+w meta+alt+i",
        "command": "workbench.action.toggleZenMode",
        "when": "!terminalFocus"
    },
    {
        "key": "meta+shift+i",
        "command": "-calva-fmt.tabDedent",
        "when": " editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+l",
        "command": "-calva-fmt.alignCurrentForm",
        "when": " editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "tab",
        "command": "-calva-fmt.formatCurrentForm",
        "when": " editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "meta+i",
        "command": "-calva-fmt.tabIndent",
        "when": " editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "shift+tab",
        "command": "-calva-fmt.inferParens",
        "when": " editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+up",
        "command": "-paredit.backwardDownSexp",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+left",
        "command": "-paredit.backwardSexp",
        "when": "calva:cursorBeforeComment && editorLangId == 'clojure' ||  editorTextFocus && !calva:cursorInComment && !config.calva.paredit.hijackVSCodeDefaults && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+left",
        "command": "-paredit.backwardSexp",
        "when": "calva:cursorBeforeComment && editorLangId == 'clojure' ||  config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+up",
        "command": "-paredit.backwardUpSexp",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+right",
        "command": "-paredit.barfSexpBackward",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+,",
        "command": "-paredit.barfSexpForward",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+c",
        "command": "-paredit.convolute",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "backspace",
        "command": "-paredit.deleteBackward",
        "when": " editorTextFocus && !calva:cursorInComment && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'"
    },
    {
        "key": "delete",
        "command": "-paredit.deleteForward",
        "when": " editorTextFocus && !calva:cursorInComment && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'"
    },
    {
        "key": "meta+shift+alt+b",
        "command": "-paredit.dragSexprBackward",
        "when": " editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+up",
        "command": "-paredit.dragSexprBackward",
        "when": " config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /strict/"
    },
    {
        "key": "meta+shift+alt+j",
        "command": "-paredit.dragSexprBackwardDown",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+u",
        "command": "-paredit.dragSexprBackwardUp",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+f",
        "command": "-paredit.dragSexprForward",
        "when": " editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+down",
        "command": "-paredit.dragSexprForward",
        "when": " config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /strict/"
    },
    {
        "key": "meta+shift+alt+d",
        "command": "-paredit.dragSexprForwardDown",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+k",
        "command": "-paredit.dragSexprForwardUp",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+right",
        "command": "-paredit.sexpRangeExpansion",
        "when": " editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+backspace",
        "command": "-paredit.forceDeleteBackward",
        "when": " editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'"
    },
    {
        "key": "alt+delete",
        "command": "-paredit.forceDeleteForward",
        "when": " editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'"
    },
    {
        "key": "meta+down",
        "command": "-paredit.forwardDownSexp",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+right",
        "command": "-paredit.forwardSexp",
        "when": "calva:cursorAfterComment && editorLangId == 'clojure' ||  editorTextFocus && !calva:cursorInComment && !config.calva.paredit.hijackVSCodeDefaults && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+right",
        "command": "-paredit.forwardSexp",
        "when": "calva:cursorAfterComment && editorLangId == 'clojure' ||  config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+end",
        "command": "-paredit.closeList",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+down",
        "command": "-paredit.forwardUpSexp",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+j",
        "command": "-paredit.joinSexp",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+delete",
        "command": "-paredit.killListForward",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+backspace",
        "command": "-paredit.killSexpBackward",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+delete",
        "command": "-paredit.killSexpForward",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+p meta+alt+r",
        "command": "-paredit.raiseSexp",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+r meta+alt+q",
        "command": "-paredit.rewrapQuote",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+r meta+alt+p",
        "command": "-paredit.rewrapParens",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+r meta+alt+s",
        "command": "-paredit.rewrapSquare",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+r meta+alt+c",
        "command": "-paredit.rewrapCurly",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+up",
        "command": "-paredit.selectBackwardDownSexp",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+left",
        "command": "-paredit.selectBackwardSexp",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+home",
        "command": "-paredit.selectOpenList",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+up",
        "command": "-paredit.selectBackwardUpSexp",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+w space",
        "command": "-paredit.rangeForDefun",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+down",
        "command": "-paredit.selectForwardDownSexp",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+right",
        "command": "-paredit.selectForwardSexp",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+end",
        "command": "-paredit.selectCloseList",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+down",
        "command": "-paredit.selectForwardUpSexp",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+left",
        "command": "-paredit.sexpRangeContraction",
        "when": " editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+left",
        "command": "-paredit.slurpSexpBackward",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+.",
        "command": "-paredit.slurpSexpForward",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+backspace",
        "command": "-paredit.spliceSexpKillBackward",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+delete",
        "command": "-paredit.spliceSexpKillForward",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+s",
        "command": "-paredit.spliceSexp",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+s",
        "command": "-paredit.splitSexp",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+p meta+alt+m",
        "command": "-paredit.togglemode",
        "when": "editorLangId == 'clojure' && editorLangId == 'clojure calva:keybindingsEnabled' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+t",
        "command": "-paredit.transpose",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+q",
        "command": "-paredit.wrapAroundQuote",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+p",
        "command": "-paredit.wrapAroundParens",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+s",
        "command": "-paredit.wrapAroundSquare",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+c",
        "command": "-paredit.wrapAroundCurly",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "escape",
        "command": "-calva.clearInlineResults",
        "when": " editorTextFocus && !editorHasMultipleSelections && !editorHasSelection && !editorReadOnly && !hasOtherSuggestions && !parameterHintsVisible && !selectionAnchorSet && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+c meta+alt+c",
        "command": "-calva.connect",
        "when": " workspaceFolderCount > 0"
    },
    {
        "key": "meta+alt+c alt+c",
        "command": "-calva.connectNonProjectREPL",
        "when": "calva:keybindingsEnabled"
    },
    {
        "key": "alt+enter",
        "command": "-calva.continueComment",
        "when": "calva:cursorInComment  && editorTextFocus && !calva:cursorAtStartOfLine && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+c meta+c",
        "command": "-calva.copyLastResults",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+shift+enter",
        "command": "-calva.evaluateEnclosingForm",
        "when": "calva:connected  && editorTextFocus"
    },
    {
        "key": "meta+alt+c e",
        "command": "-calva.evaluateSelection",
        "when": "calva:connected "
    },
    {
        "key": "meta+enter",
        "command": "-calva.evaluateSelection",
        "when": "calva:connected  && editorTextFocus"
    },
    {
        "key": "meta+alt+c r",
        "command": "-calva.evaluateSelectionReplace",
        "when": "calva:connected "
    },
    {
        "key": "meta+alt+c c",
        "command": "-calva.evaluateSelectionAsComment",
        "when": "calva:connected "
    },
    {
        "key": "meta+shift+alt+enter",
        "command": "-calva.evaluateStartOfFileToCursor",
        "when": "calva:connected  && editorTextFocus"
    },
    {
        "key": "meta+alt+enter",
        "command": "-calva.evaluateToCursor",
        "when": "calva:connected  && editorTextFocus"
    },
    {
        "key": "shift+alt+enter",
        "command": "-calva.evaluateTopLevelFormToCursor",
        "when": "calva:connected  && editorTextFocus"
    },
    {
        "key": "meta+alt+c space",
        "command": "-calva.evaluateCurrentTopLevelForm",
        "when": "calva:connected "
    },
    {
        "key": "enter",
        "command": "-calva.evaluateCurrentTopLevelForm",
        "when": "calva:connected  && calva:outputWindowActive && calva:outputWindowSubmitOnEnter && editorTextFocus"
    },
    {
        "key": "alt+enter",
        "command": "-calva.evaluateCurrentTopLevelForm",
        "when": "calva:connected  && editorTextFocus"
    },
    {
        "key": "meta+alt+c meta+space",
        "command": "-calva.evaluateTopLevelFormAsComment",
        "when": "calva:connected "
    },
    {
        "key": "meta+alt+c meta+alt+d",
        "command": "-calva.interruptAllEvaluations",
        "when": "calva:connected "
    },
    {
        "key": "meta+alt+c enter",
        "command": "-calva.loadFile",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+c meta+alt+p",
        "command": "-calva.printLastStacktrace",
        "when": "calva:connected "
    },
    {
        "key": "meta+alt+c meta+u",
        "command": "-calva.requireREPLUtilities",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+c shift+t",
        "command": "-calva.runAllTests",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+c meta+alt+t",
        "command": "-calva.runTestUnderCursor",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space enter",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space ,",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space .",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space -",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space backspace",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space left",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space right",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space up",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space down",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space tab",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space 0",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space 1",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space 2",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space 3",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space 4",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space 5",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space 6",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space 7",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space 8",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space 9",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space a",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space b",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space c",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space d",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space e",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space f",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space g",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space h",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space i",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space j",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space k",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space l",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space m",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space n",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space o",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space p",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space q",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space r",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space s",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space t",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space u",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space v",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space w",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space x",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space y",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space z",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+space space",
        "command": "-calva.runCustomREPLCommand",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+c meta+t",
        "command": "-calva.rerunTests",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+c t",
        "command": "-calva.runNamespaceTests",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+c meta+alt+b",
        "command": "-calva.switchCljsBuild",
        "when": "calva:connected "
    },
    {
        "key": "meta+alt+c meta+s",
        "command": "-calva.selectCurrentForm",
        "when": " editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+c meta+alt+space",
        "command": "-calva.sendCurrentTopLevelFormToOutputWindow",
        "when": "calva:connected  && !calva:outputWindowActive && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+c o",
        "command": "-calva.showFileForOutputWindowNS",
        "when": "calva:connected  && calva:outputWindowActive"
    },
    {
        "key": "alt+down",
        "command": "-calva.showNextReplHistoryEntry",
        "when": "calva:connected  && calva:outputWindowActive && calva:replHistoryCommandsActive && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+c o",
        "command": "-calva.showOutputWindow",
        "when": "calva:connected  && !calva:outputWindowActive"
    },
    {
        "key": "alt+up",
        "command": "-calva.showPreviousReplHistoryEntry",
        "when": "calva:connected  && calva:outputWindowActive && calva:replHistoryCommandsActive && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+c meta+alt+j",
        "command": "-calva.jackIn",
        "when": " workspaceFolderCount > 0"
    },
    {
        "key": "meta+alt+c meta+alt+r",
        "command": "-calva.startOrConnectRepl"
    },
    {
        "key": "meta+alt+c n",
        "command": "-calva.setOutputWindowNamespace",
        "when": "calva:connected  && !calva:outputWindowActive && editorLangId == 'clojure'"
    },
    {
        "key": "meta+shift+t t",
        "command": "-calva.tapSelection",
        "when": "calva:connected  && editorTextFocus"
    },
    {
        "key": "meta+shift+t space",
        "command": "-calva.tapCurrentTopLevelForm",
        "when": "calva:connected  && editorTextFocus"
    },
    {
        "key": "meta+alt+c p",
        "command": "-calva.togglePrettyPrint",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+c meta+alt+s",
        "command": "-calva.toggleCLJCSession",
        "when": "calva:connected "
    },
    {
        "key": "meta+home",
        "command": "-paredit.openList",
        "when": " editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+c i",
        "command": "-calva.debug.instrument",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+enter",
        "command": "calva.evaluateEnclosingForm",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+enter",
        "command": "calva.evaluateSelection",
        "when": "editorHasSelection && calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+shift+enter",
        "command": "calva.evaluateSelectionReplace",
        "when": "editorHasSelection && calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+enter",
        "command": "calva.evaluateCurrentTopLevelForm",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "alt+r meta+alt+l",
        "command": "calva.clearInlineResults",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "alt+r i",
        "command": "calva.refactor.inlineSymbol",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "alt+s meta+d",
        "command": "calva.interruptAllEvaluations",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+shift+i",
        "command": "paredit.sexpRangeExpansion",
        "when": "editorLangId == 'clojure'"
    },
    {
        "key": "tab",
        "command": "calva-fmt.tabIndent",
        "when": "editorLangId == 'clojure'"
    },
    {
        "key": "alt+r r",
        "command": "calva-fmt.formatCurrentForm",
        "when": "editorLangId == 'clojure'"
    },
    {
        "key": "alt+s meta+alt+o",
        "command": "calva.runAllTests",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "alt+s meta+o",
        "command": "calva.rerunTests",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "alt+s alt+o",
        "command": "calva.runNamespaceTests",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "alt+s o",
        "command": "calva.runTestUnderCursor",
        "when": "calva:connected  && editorLangId == 'clojure'"
    },
    {
        "key": "alt+w alt+p",
        "command": "workbench.files.action.showActiveFileInExplorer"
    },
    {
        "key": "delete",
        "command": "paredit.deleteForward",
        "when": "editorLangId == 'clojure'"
    },
    {
        "key": "meta+shift+alt+k",
        "command": "paredit.sexpRangeContraction",
        "when": "editorLangId == 'clojure'"
    },
    {
        "key": "meta+alt+up",
        "command": "-paredit.backwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+left",
        "command": "-paredit.backwardSexp",
        "when": "calva:cursorBeforeComment && editorLangId == 'clojure' || calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !config.calva.paredit.hijackVSCodeDefaults && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+left",
        "command": "-paredit.backwardSexp",
        "when": "calva:cursorBeforeComment && editorLangId == 'clojure' || calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+up",
        "command": "-paredit.backwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+right",
        "command": "-paredit.barfSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+,",
        "command": "-paredit.barfSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+c",
        "command": "-paredit.convolute",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "backspace",
        "command": "-paredit.deleteBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'"
    },
    {
        "key": "delete",
        "command": "-paredit.deleteForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'"
    },
    {
        "key": "meta+shift+alt+b",
        "command": "-paredit.dragSexprBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+up",
        "command": "-paredit.dragSexprBackward",
        "when": "calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /strict/"
    },
    {
        "key": "meta+shift+alt+j",
        "command": "-paredit.dragSexprBackwardDown",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+u",
        "command": "-paredit.dragSexprBackwardUp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+f",
        "command": "-paredit.dragSexprForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+down",
        "command": "-paredit.dragSexprForward",
        "when": "calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /strict/"
    },
    {
        "key": "meta+shift+alt+d",
        "command": "-paredit.dragSexprForwardDown",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+k",
        "command": "-paredit.dragSexprForwardUp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+right",
        "command": "-paredit.sexpRangeExpansion",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+backspace",
        "command": "-paredit.forceDeleteBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'"
    },
    {
        "key": "alt+delete",
        "command": "-paredit.forceDeleteForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'"
    },
    {
        "key": "meta+down",
        "command": "-paredit.forwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+right",
        "command": "-paredit.forwardSexp",
        "when": "calva:cursorAfterComment && editorLangId == 'clojure' || calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !config.calva.paredit.hijackVSCodeDefaults && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+right",
        "command": "-paredit.forwardSexp",
        "when": "calva:cursorAfterComment && editorLangId == 'clojure' || calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+end",
        "command": "-paredit.closeList",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+down",
        "command": "-paredit.forwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+j",
        "command": "-paredit.joinSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+backspace",
        "command": "-paredit.killListBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+delete",
        "command": "-paredit.killListForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+backspace",
        "command": "-paredit.killSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+delete",
        "command": "-paredit.killSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+p meta+alt+r",
        "command": "-paredit.raiseSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+r meta+alt+q",
        "command": "-paredit.rewrapQuote",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+r meta+alt+p",
        "command": "-paredit.rewrapParens",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+r meta+alt+s",
        "command": "-paredit.rewrapSquare",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+r meta+alt+c",
        "command": "-paredit.rewrapCurly",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+up",
        "command": "-paredit.selectBackwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+left",
        "command": "-paredit.selectBackwardSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+home",
        "command": "-paredit.selectOpenList",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+up",
        "command": "-paredit.selectBackwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+w space",
        "command": "-paredit.rangeForDefun",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+down",
        "command": "-paredit.selectForwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+right",
        "command": "-paredit.selectForwardSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+end",
        "command": "-paredit.selectCloseList",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+down",
        "command": "-paredit.selectForwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+left",
        "command": "-paredit.sexpRangeContraction",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+left",
        "command": "-paredit.slurpSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+.",
        "command": "-paredit.slurpSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+backspace",
        "command": "-paredit.spliceSexpKillBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+delete",
        "command": "-paredit.spliceSexpKillForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+s",
        "command": "-paredit.spliceSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+s",
        "command": "-paredit.splitSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+alt+t",
        "command": "-paredit.transpose",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+q",
        "command": "-paredit.wrapAroundQuote",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+p",
        "command": "-paredit.wrapAroundParens",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+s",
        "command": "-paredit.wrapAroundSquare",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "meta+shift+alt+c",
        "command": "-paredit.wrapAroundCurly",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "escape",
        "command": "-calva.clearInlineResults",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorHasSelection && !editorReadOnly && !hasOtherSuggestions && !parameterHintsVisible && !selectionAnchorSet && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "meta+home",
        "command": "-paredit.openList",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "backspace",
        "command": "paredit.deleteBackward",
        "when": "editorLangId == 'clojure'"
    },
    {
        "key": "meta+[",
        "command": "-markdown.extension.onOutdentLines",
        "when": "editorTextFocus && !suggestWidgetVisible && editorLangId == 'markdown'"
    },
    {
        "key": "meta+[",
        "command": "editor.emmet.action.matchTag"
    },
    {
        "key": "meta+]",
        "command": "-markdown.extension.onIndentLines",
        "when": "editorTextFocus && !suggestWidgetVisible && editorLangId == 'markdown'"
    },
    {
        "key": "alt+e alt+l",
        "command": "paredit.slurpSexpForward"
    },
    {
        "key": "alt+e alt+j",
        "command": "paredit.barfSexpForward"
    },
    {
        "key": "alt+e alt+[Semicolon]",
        "command": "paredit.barfSexpBackward"
    },
    {
        "key": "alt+e alt+h",
        "command": "paredit.slurpSexpBackward"
    },
    {
        "key": "alt+e meta+j",
        "command": "paredit.joinSexp"
    },
    {
        "key": "meta+alt+space",
        "command": "-toggleSuggestionFocus",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "k",
        "command": "-list.focusUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "meta+o",
        "command": "-workbench.action.files.openFileFolder",
        "when": "isMacNative && openFolderWorkspaceSupport"
    },
    {
        "key": "meta+k meta+o",
        "command": "-workbench.action.files.openLocalFolder",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "alt+o",
        "command": "-C_Cpp.SwitchHeaderSource",
        "when": "editorTextFocus && editorLangId == 'c' || editorTextFocus && editorLangId == 'cpp' || editorTextFocus && editorLangId == 'cuda-cpp'"
    },
    {
        "key": "shift+enter",
        "command": "-jupyter.execSelectionInteractive",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.ownsSelection && !findInputFocussed && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "meta+enter",
        "command": "-language-julia.executeJuliaCodeInREPL",
        "when": "editorTextFocus && editorLangId == 'julia' && activeEditor != 'workbench.editor.notebook'"
    },
    {
        "key": "meta+l alt+m",
        "command": "-latex-workshop.toggleMathPreviewPanel",
        "when": "config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "alt+o",
        "command": "-ocaml.switch-impl-intf",
        "when": "editorLangId == 'ocaml' || editorLangId == 'ocaml.interface' || editorLangId == 'ocaml.menhir' || editorLangId == 'ocaml.ocamllex' || editorLangId == 'reason'"
    },
    {
        "key": "shift+enter",
        "command": "-python.execSelectionInTerminal",
        "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "meta+alt+r",
        "command": "-terminal.run"
    },
    {
        "key": "alt+d",
        "command": "-editor.action.codeAction",
        "when": "editorLangId == 'ocaml' || editorLangId == 'reason'"
    },
    {
        "key": "shift+enter",
        "command": "-jupyter.runcurrentcelladvance",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "meta+r",
        "command": "-python.refreshTensorBoard",
        "when": "python.hasActiveTensorBoardSession"
    },
    {
        "key": "meta+alt+c",
        "command": "-terminal.stop"
    },
    {
        "key": "alt+p",
        "command": "-editor.action.codeAction",
        "when": "editorLangId == 'ocaml.interface' || editorLangId == 'reason'"
    },
    {
        "key": "meta+enter",
        "command": "-jupyter.runcurrentcell",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused"
    },
    {
        "key": "meta+c",
        "command": "-language-julia.interrupt",
        "when": "isJuliaEvaluating && isJuliaREPL && terminalFocus"
    },
    {
        "key": "meta+alt+o",
        "command": "-terminal.open"
    },
    {
        "key": "shift+alt+k",
        "command": "-bookmarks.shrinkSelection",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+enter",
        "command": "-jupyter.runcurrentcellandaddbelow",
        "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "alt+k",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "down",
        "command": "-language-julia.plotpane-next",
        "when": "jlplotpaneFocus"
    },
    {
        "key": "alt+k",
        "command": "cursorDown",
        "when": "textInputFocus"
    },
    {
        "key": "alt+k",
        "command": "history.showNext",
        "when": "historyNavigationForwardsEnabled && historyNavigationWidget"
    },
    {
        "key": "alt+k",
        "command": "interactive.history.next",
        "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'"
    },
    {
        "key": "alt+k",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "alt+k",
        "command": "notifications.focusNextToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "alt+k",
        "command": "scm.viewNextCommit",
        "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible"
    },
    {
        "key": "down",
        "command": "-scm.viewNextCommit",
        "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible"
    },
    {
        "key": "alt+k",
        "command": "settings.action.focusSettingsFile",
        "when": "inSettingsSearch && !suggestWidgetVisible"
    },
    {
        "key": "alt+k",
        "command": "settings.action.focusSettingsFromSearch",
        "when": "inSettingsSearch && !suggestWidgetVisible"
    },
    {
        "key": "alt+k",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+k",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+k",
        "command": "keybindings.editor.focusKeybindings",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "alt+k",
        "command": "list.scrollDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "meta+down",
        "command": "-list.scrollDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "alt+k",
        "command": "problems.action.focusProblemsFromFilter",
        "when": "problemsFilterFocus"
    },
    {
        "key": "alt+k",
        "command": "search.focus.nextInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
    },
    {
        "key": "alt+i",
        "command": "workbench.action.terminal.navigationModeFocusPrevious",
        "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+i",
        "command": "list.scrollUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "alt+i",
        "command": "search.action.focusSearchFromResults",
        "when": "firstMatchFocus && searchViewletVisible"
    },
    {
        "key": "alt+i",
        "command": "search.focus.previousInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
    },
    {
        "key": "alt+i",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+i",
        "command": "cursorUp",
        "when": "textInputFocus"
    },
    {
        "key": "alt+i",
        "command": "history.showPrevious",
        "when": "historyNavigationBackwardsEnabled && historyNavigationWidget"
    },
    {
        "key": "alt+i",
        "command": "interactive.history.previous",
        "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
    },
    {
        "key": "alt+i",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "alt+i",
        "command": "notifications.focusPreviousToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "alt+i",
        "command": "scm.viewPreviousCommit",
        "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible"
    },
    {
        "key": "alt+i",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+i",
        "command": "workbench.action.interactivePlayground.arrowUp",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "alt+i",
        "command": "workbench.statusBar.focusPrevious",
        "when": "statusBarFocused"
    },
    {
        "key": "alt+i",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+i",
        "command": "settings.action.focusSettingsFromSearch",
        "when": "inSettingsSearch && !suggestWidgetVisible"
    },
    {
        "key": "alt+i",
        "command": "settings.action.focusSettingsFile",
        "when": "inSettingsSearch && !suggestWidgetVisible"
    },
    {
        "key": "alt+k",
        "command": "notifications.focusNextToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "alt+k",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "alt+k",
        "command": "interactive.history.next",
        "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'"
    },
    {
        "key": "alt+k",
        "command": "interactive.history.next",
        "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'"
    },
    {
        "key": "alt+k",
        "command": "history.showNext",
        "when": "historyNavigationForwardsEnabled && historyNavigationWidget"
    },
    {
        "key": "alt+k",
        "command": "cursorDown",
        "when": "textInputFocus"
    },
    {
        "key": "meta+shift+alt+down",
        "command": "-cursorColumnSelectDown",
        "when": "textInputFocus"
    },
    {
        "key": "meta+shift+alt+left",
        "command": "-cursorColumnSelectLeft",
        "when": "textInputFocus"
    },
    {
        "key": "meta+shift+alt+right",
        "command": "-cursorColumnSelectRight",
        "when": "textInputFocus"
    },
    {
        "key": "meta+shift+alt+up",
        "command": "-cursorColumnSelectUp",
        "when": "textInputFocus"
    },
    {
        "key": "meta+down",
        "command": "-scrollLineDown",
        "when": "textInputFocus"
    },
    {
        "key": "meta+up",
        "command": "-scrollLineUp",
        "when": "textInputFocus"
    },
    {
        "key": "meta+right",
        "command": "cursorWordEndRight",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "meta+left",
        "command": "cursorWordLeft",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "shift+alt+down",
        "command": "-editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+up",
        "command": "-editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+alt+up",
        "command": "-editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+alt+down",
        "command": "-editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+right",
        "command": "-editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+left",
        "command": "-editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+down",
        "command": "-showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+up",
        "command": "-showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "meta+down",
        "command": "-selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "meta+up",
        "command": "-selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "meta+right",
        "command": "-breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "meta+left",
        "command": "-breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "alt+down",
        "command": "-history.showNext",
        "when": "historyNavigationForwardsEnabled && historyNavigationWidget && !suggestWidgetVisible"
    },
    {
        "key": "alt+up",
        "command": "-history.showPrevious",
        "when": "historyNavigationBackwardsEnabled && historyNavigationWidget && !suggestWidgetVisible"
    },
    {
        "key": "meta+down",
        "command": "-keybindings.editor.focusKeybindings",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "meta+left",
        "command": "-list.collapseAll",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "meta+down",
        "command": "-list.scrollDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "meta+up",
        "command": "-list.scrollUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "shift+alt+down",
        "command": "-notebook.cell.copyDown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "shift+alt+up",
        "command": "-notebook.cell.copyUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "meta+down",
        "command": "-notebook.cell.focusInOutput",
        "when": "notebookCellHasOutputs && notebookEditorFocused"
    },
    {
        "key": "meta+up",
        "command": "-notebook.cell.focusOutOutput",
        "when": "notebookEditorFocused"
    },
    {
        "key": "alt+down",
        "command": "-notebook.cell.moveDown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+up",
        "command": "-notebook.cell.moveUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "meta+down",
        "command": "-notebook.focusNextEditor",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "meta+down",
        "command": "-problems.action.focusProblemsFromFilter",
        "when": "problemsFilterFocus"
    },
    {
        "key": "alt+down",
        "command": "-scm.forceViewNextCommit",
        "when": "scmRepository"
    },
    {
        "key": "alt+up",
        "command": "-scm.forceViewPreviousCommit",
        "when": "scmRepository"
    },
    {
        "key": "meta+up",
        "command": "-search.action.focusSearchFromResults",
        "when": "firstMatchFocus && searchViewletVisible"
    },
    {
        "key": "meta+down",
        "command": "-search.focus.nextInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
    },
    {
        "key": "meta+up",
        "command": "-search.focus.previousInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
    },
    {
        "key": "meta+k meta+up",
        "command": "-workbench.action.focusAboveGroup"
    },
    {
        "key": "meta+k meta+down",
        "command": "-workbench.action.focusBelowGroup"
    },
    {
        "key": "meta+k meta+left",
        "command": "-workbench.action.focusLeftGroup"
    },
    {
        "key": "meta+k meta+right",
        "command": "-workbench.action.focusRightGroup"
    },
    {
        "key": "meta+k down",
        "command": "-workbench.action.moveActiveEditorGroupDown"
    },
    {
        "key": "meta+k left",
        "command": "-workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "meta+k right",
        "command": "-workbench.action.moveActiveEditorGroupRight"
    },
    {
        "key": "meta+k up",
        "command": "-workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "meta+alt+right",
        "command": "-workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "meta+alt+left",
        "command": "-workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.navigateBack"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.navigateForward"
    },
    {
        "key": "alt+down",
        "command": "-workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+up",
        "command": "-workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "meta+down",
        "command": "-workbench.action.terminal.navigationModeFocusNext",
        "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "meta+up",
        "command": "-workbench.action.terminal.navigationModeFocusPrevious",
        "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "meta+right",
        "command": "-breadcrumbs.focusNextWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "meta+left",
        "command": "-breadcrumbs.focusPreviousWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "meta+k down",
        "command": "-views.moveViewDown",
        "when": "focusedView != ''"
    },
    {
        "key": "meta+k left",
        "command": "-views.moveViewLeft",
        "when": "focusedView != ''"
    },
    {
        "key": "meta+k right",
        "command": "-views.moveViewRight",
        "when": "focusedView != ''"
    },
    {
        "key": "meta+k up",
        "command": "-views.moveViewUp",
        "when": "focusedView != ''"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.quickInputBack",
        "when": "inQuickOpen"
    },
    {
        "key": "alt+k",
        "command": "cursorDown",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+k",
        "command": "cursorDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+j",
        "command": "cursorLeft",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+j",
        "command": "cursorLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+l",
        "command": "cursorRight",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+l",
        "command": "cursorRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+i",
        "command": "cursorUp",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+i",
        "command": "cursorUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+k",
        "command": "cursorColumnSelectDown",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+alt+j",
        "command": "cursorColumnSelectLeft",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+alt+l",
        "command": "cursorColumnSelectRight",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+alt+i",
        "command": "cursorColumnSelectUp",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "meta+shift+alt+l",
        "command": "cursorWordEndRightSelect",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "meta+shift+alt+j",
        "command": "cursorWordLeftSelect",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "alt+i",
        "command": "notebook.focusPreviousEditor",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
    },
    {
        "key": "alt+k",
        "command": "settings.action.focusSettingsFile",
        "when": "inSettingsSearch && !suggestWidgetVisible"
    },
    {
        "key": "alt+k",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+i",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+k",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+i",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+l",
        "command": "breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "alt+j",
        "command": "breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "alt+k",
        "command": "breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "alt+k",
        "command": "history.showNext",
        "when": "historyNavigationForwardsEnabled && historyNavigationWidget && !suggestWidgetVisible"
    },
    {
        "key": "alt+i",
        "command": "history.showPrevious",
        "when": "historyNavigationBackwardsEnabled && historyNavigationWidget && !suggestWidgetVisible"
    },
    {
        "key": "alt+k",
        "command": "interactive.history.next",
        "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'"
    },
    {
        "key": "alt+i",
        "command": "interactive.history.previous",
        "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
    },
    {
        "key": "alt+j",
        "command": "list.collapse",
        "when": "listFocus && treeElementCanCollapse && !inputFocus || listFocus && treeElementHasParent && !inputFocus"
    },
    {
        "key": "alt+l",
        "command": "list.expand",
        "when": "listFocus && treeElementCanExpand && !inputFocus || listFocus && treeElementHasChild && !inputFocus"
    },
    {
        "key": "shift+alt+k",
        "command": "list.expandSelectionDown",
        "when": "listFocus && listSupportsMultiselect && !inputFocus"
    },
    {
        "key": "shift+alt+i",
        "command": "list.expandSelectionUp",
        "when": "listFocus && listSupportsMultiselect && !inputFocus"
    },
    {
        "key": "alt+k",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "alt+k",
        "command": "scm.viewNextCommit",
        "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible"
    },
    {
        "key": "alt+i",
        "command": "scm.viewPreviousCommit",
        "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible"
    },
    {
        "key": "alt+k",
        "command": "settings.action.focusSettingsFromSearch",
        "when": "inSettingsSearch && !suggestWidgetVisible"
    },
    {
        "key": "alt+j",
        "command": "settings.action.focusTOC",
        "when": "inSettingsEditor && settingRowFocus"
    },
    {
        "key": "alt+k",
        "command": "workbench.action.interactivePlayground.arrowDown",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "alt+i",
        "command": "workbench.action.interactivePlayground.arrowUp",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "alt+k",
        "command": "workbench.banner.focusNextAction",
        "when": "bannerFocused"
    },
    {
        "key": "alt+l",
        "command": "workbench.banner.focusNextAction",
        "when": "bannerFocused"
    },
    {
        "key": "alt+i",
        "command": "workbench.banner.focusPreviousAction",
        "when": "bannerFocused"
    },
    {
        "key": "alt+j",
        "command": "workbench.banner.focusPreviousAction",
        "when": "bannerFocused"
    },
    {
        "key": "alt+k",
        "command": "workbench.statusBar.focusNext",
        "when": "statusBarFocused"
    },
    {
        "key": "alt+l",
        "command": "workbench.statusBar.focusNext",
        "when": "statusBarFocused"
    },
    {
        "key": "alt+i",
        "command": "workbench.statusBar.focusPrevious",
        "when": "statusBarFocused"
    },
    {
        "key": "alt+j",
        "command": "workbench.statusBar.focusPrevious",
        "when": "statusBarFocused"
    },
    {
        "key": "alt+l",
        "command": "nextCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
    },
    {
        "key": "alt+j",
        "command": "previousCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
    },
    {
        "key": "meta+w",
        "command": "-editor.action.smartSelect.grow",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+alt+oem_6",
        "command": "-jupyter.gotoNextCellInFile",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "f10",
        "command": "-jupyter.runByLineNext",
        "when": "jupyter.notebookeditor.runByLineInProgress"
    },
    {
        "key": "f7",
        "command": "-merge-conflict.next",
        "when": "merge-conflict"
    },
    {
        "key": "alt+f3",
        "command": "-editor.action.dirtydiff.next",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "meta+shift+alt+down",
        "command": "-editor.action.dirtydiff.next",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+d alt+k",
        "command": "editor.action.inlineSuggest.showNext",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "alt+oem_6",
        "command": "-editor.action.inlineSuggest.showNext",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "meta+enter",
        "command": "keybindings.editor.addKeybinding",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "meta+k meta+a",
        "command": "-keybindings.editor.addKeybinding",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "alt+d k",
        "command": "editor.action.inlineSuggest.showNext",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "alt+r j",
        "command": "editor.action.joinLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "meta+shift+j",
        "command": "-editor.action.joinLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+d i",
        "command": "editor.action.inlineSuggest.showPrevious",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "alt+oem_4",
        "command": "-editor.action.inlineSuggest.showPrevious",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "alt+d alt+i",
        "command": "editor.action.inlineSuggest.showPrevious",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "meta+enter",
        "command": "-editor.action.goToDeclaration",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+w meta+enter",
        "command": "editor.debug.action.selectionToRepl",
        "when": "debuggersAvailable && editorHasSelection && editorTextFocus"
    },
    {
        "key": "alt+f8",
        "command": "-editor.debug.action.selectionToRepl",
        "when": "debuggersAvailable && editorHasSelection && editorTextFocus"
    },
    {
        "key": "alt+m meta+f",
        "command": "workbench.files.action.createFolderFromExplorer"
    },
    {
        "key": "alt+a d",
        "command": "foam-vscode.open-daily-note"
    },
    {
        "key": "alt+d",
        "command": "-foam-vscode.open-daily-note"
    },
    {
        "key": "alt+d n",
        "command": "foam-vscode.create-note-from-default-template"
    },
    {
        "key": "alt+a t",
        "command": "foam-vscode.create-note-from-template"
    },
    {
        "key": "alt+a g",
        "command": "foam-vscode.show-graph"
    },
    {
        "key": "alt+o r",
        "command": "extension.intellijRecentFiles",
    },
    {
        "key": "alt+o meta+f",
        "command": "projectManager.listProjectsNewWindow"
    },
    {
        "key": "shift+alt+l",
        "command": "-bookmarks.expandSelectionToNext",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+j",
        "command": "-bookmarks.expandSelectionToPrevious",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+b",
        "command": "-gitlens.toggleFileBlame",
        "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/"
    },
    {
        "key": "alt+b b",
        "command": "bookmarks.toggleLabeled"
    },
    {
        "key": "alt+b tab",
        "command": "bookmarks.list"
    },
    {
        "key": "alt+n cmd+alt+i",
        "command": "cursorTop",
        "when": "textInputFocus"
    },
    {
        "key": "alt+n meta+alt+k",
        "command": "cursorBottom",
        "when": "textInputFocus"
    },
    {
        "key": "alt+n meta+shift+alt+k",
        "command": "cursorBottomSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+n meta+shift+alt+i",
        "command": "cursorTopSelect",
        "when": "textInputFocus"
    },
    {
        "key": "meta+shift+home",
        "command": "-cursorTopSelect",
        "when": "textInputFocus"
    },
    {
        "key": "meta+alt+v",
        "command": "-editor.action.codeAction",
        "when": "editorTextFocus"
    },
    {
        "key": "meta+alt+a",
        "command": "editor.action.selectAll"
    },
    {
        "key": "alt+z enter",
        "command": "workbench.action.splitEditorRight",
        "when": "editorFocus"
    },
    {
        "key": "meta+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "alt+j alt+w",
        "command": "-REPLVariables.focus"
    },
    {
        "key": "meta+r",
        "command": "-jupyter.refreshDataViewer",
        "when": "isWorkspaceTrusted && jupyter.dataViewerActive"
    },
    {
        "key": "meta+shift+g b",
        "command": "-gitlens.toggleFileBlame",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/"
    },
    {
        "key": "shift+alt+b",
        "command": "-gitlens.toggleCodeLens",
        "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "meta+shift+g shift+b",
        "command": "-gitlens.toggleCodeLens",
        "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "l",
        "command": "-notebook.cell.toggleLineNumbers",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "shift+l",
        "command": "-notebook.toggleLineNumbers",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "o",
        "command": "-notebook.cell.toggleOutputs",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+c",
        "command": "-workbench.action.terminal.toggleFindCaseSensitive",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+r",
        "command": "-workbench.action.terminal.toggleFindRegex",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+w",
        "command": "-workbench.action.terminal.toggleFindWholeWord",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+z",
        "command": "-workbench.action.terminal.sizeToContentWidth",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported"
    },
    {
        "key": "meta+oem_1 meta+i",
        "command": "-testing.toggleInlineTestOutput"
    },
    {
        "key": "alt+h",
        "command": "-testing.toggleTestingPeekHistory",
        "when": "testing.isPeekVisible"
    },
    {
        "key": "meta+b",
        "command": "-markdown.extension.editing.toggleBold",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "meta+shift+oem_4",
        "command": "-markdown.extension.editing.toggleHeadingDown",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "meta+shift+oem_6",
        "command": "-markdown.extension.editing.toggleHeadingUp",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "meta+i",
        "command": "-markdown.extension.editing.toggleItalic",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "alt+s",
        "command": "-markdown.extension.editing.toggleStrikethrough",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "meta+shift+v",
        "command": "-markdown.extension.togglePreview",
        "when": "!terminalFocus"
    },
    {
        "key": "alt+c",
        "command": "-toggleFindCaseSensitive",
        "when": "editorFocus"
    },
    {
        "key": "alt+r",
        "command": "-toggleFindRegex",
        "when": "editorFocus"
    },
    {
        "key": "alt+w",
        "command": "-toggleFindWholeWord",
        "when": "editorFocus"
    },
    {
        "key": "alt+p",
        "command": "-togglePreserveCase",
        "when": "editorFocus"
    },
    {
        "key": "alt+c",
        "command": "-toggleSearchCaseSensitive",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+p",
        "command": "-toggleSearchPreserveCase",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+r",
        "command": "-toggleSearchRegex",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+w",
        "command": "-toggleSearchWholeWord",
        "when": "searchViewletFocus"
    },
    {
        "key": "meta+i",
        "command": "-toggleSuggestionDetails",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "meta+space",
        "command": "-toggleSuggestionDetails",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "escape escape",
        "command": "-workbench.action.exitZenMode",
        "when": "inZenMode"
    },
    {
        "key": "f3",
        "command": "-workbench.action.terminal.findNext",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+f3",
        "command": "-workbench.action.terminal.findPrevious",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "meta+f",
        "command": "-workbench.action.terminal.focusFind",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+x c",
        "command": "toggleFindCaseSensitive",
        "when": "editorFocus"
    },
    {
        "key": "alt+x r",
        "command": "toggleFindRegex",
        "when": "editorFocus"
    },
    {
        "key": "alt+x s",
        "command": "actions.findWithSelection"
    },
    {
        "key": "alt+o f",
        "command": "workbench.action.files.openFolderViaWorkspace"
    },
    {
        "key": "alt+x e",
        "command": "extension.multiCommand.execute",
        "args": {
            "interval": 4000,
            "sequence": [
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "cd C:/Users/Mateus/Desktop/workspace/canalhaclub/jewel ; npm install ; vsce package ; code --install-extension ./jewel-0.0.4.vsix --force\n"
                    }
                },
                {
                    "command": "workbench.action.reloadWindow",
                },
            ]
        }
    },
    {
        "key": "alt+w x",
        "command": "workbench.view.extensions"
    },
    {
        "key": "meta+oem_1 meta+m",
        "command": "-testing.openOutputPeek"
    },
    {
        "key": "meta+oem_1 meta+o",
        "command": "-testing.showMostRecentOutput",
        "when": "testing.hasAnyResults"
    },
    {
        "key": "alt+w o",
        "command": "workbench.panel.output.focus"
    },
    {
        "key": "alt+w meta+c",
        "command": "code-runner.stop"
    },
    {
        "key": "meta+l",
        "command": "workbench.output.action.clearOutput",
        "when": "view.workbench.panel.output.vis"
    },
    {
        "key": "alt+m x",
        "command": "workbench.action.openGlobalKeybindingsFile"
    },
    {
        "key": "alt+w meta+backspace",
        "command": "workbench.action.closeAllEditors"
    },
    {
        "key": "alt+up",
        "command": "workbench.action.terminal.scrollUp",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "meta+alt+pageup",
        "command": "-workbench.action.terminal.scrollUp",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "alt+down",
        "command": "workbench.action.terminal.scrollDown",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "meta+alt+pagedown",
        "command": "-workbench.action.terminal.scrollDown",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "meta+shift+5",
        "command": "-workbench.action.terminal.split",
        "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
    },
    {
        "key": "alt+w meta+l",
        "command": "workbench.action.terminal.split",
        "when": "terminalFocus"
    },
    {
        "key": "meta+shift+5",
        "command": "-workbench.action.terminal.splitInstance",
        "when": "terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "alt+w meta+k",
        "command": "workbench.action.splitEditorDown",
        "when": "editorFocus"
    },
    {
        "key": "meta+k meta+shift+oem_5",
        "command": "-workbench.action.splitEditorInGroup",
        "when": "activeEditorCanSplitInGroup"
    },
    {
        "key": "alt+w 1",
        "command": "workbench.action.openEditorAtIndex1"
    },
    {
        "key": "alt+1",
        "command": "-workbench.action.openEditorAtIndex1"
    },
    {
        "key": "alt+w 2",
        "command": "workbench.action.openEditorAtIndex2"
    },
    {
        "key": "alt+2",
        "command": "-workbench.action.openEditorAtIndex2"
    },
    {
        "key": "alt+w 3",
        "command": "workbench.action.openEditorAtIndex3"
    },
    {
        "key": "alt+3",
        "command": "-workbench.action.openEditorAtIndex3"
    },
    {
        "key": "alt+w alt+l",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "alt+m alt+j",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "meta+pageup",
        "command": "-workbench.action.previousEditor"
    },
    {
        "key": "alt+w 8",
        "command": "workbench.action.openNextRecentlyUsedEditor"
    },
    {
        "key": "alt+m meta+n",
        "command": "openEditors.newUntitledFile",
        "when": "editorFocus"
    },
    {
        "key": "meta+w",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "alt+o meta+l",
        "command": "revealFileInOS",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "meta+w",
        "command": "workbench.action.terminal.kill",
        "when": "terminalFocus"
    },
    {
        "key": "alt+w l",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus"
    },
    {
        "key": "alt+w j",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus"
    },
    {
        "key": "alt+n alt+i",
        "command": "workbench.action.terminal.scrollToPreviousCommand",
        "when": "terminalFocus"
    },
    {
        "key": "alt+n alt+k",
        "command": "workbench.action.terminal.scrollToNextCommand",
        "when": "terminalFocus"
    },
    {
        "key": "alt+n shift+alt+k",
        "command": "workbench.action.terminal.selectToNextCommand",
        "when": "terminalFocus"
    },
    {
        "key": "alt+a up",
        "command": "references-view.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider"
    },
    {
        "key": "meta+f2",
        "command": "-editor.action.changeAll",
        "when": "editorTextFocus && editorTextFocus && !editorReadonly"
    },
    {
        "key": "numpad_add",
        "command": "cursorUndo",
        "when": "textInputFocus"
    },
    // 
    // custom
    // 
    {
        "key": "alt+x l",
        "command": "workbench.action.editor.changeLanguageMode"
    },
    {
        "key": "alt+f d",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus && editorHasSelection"
    },
    {
        "key": "alt+s r",
        "command": "workbench.action.debug.continue",
        "when": "inDebugMode"
    },
    {
        "key": "alt+n f",
        "command": "workbench.action.terminal.openUrlLink"
    },
    {
        "key": "alt+n meta+alt+k",
        "command": "workbench.action.terminal.scrollToBottom",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "alt+n meta+alt+i",
        "command": "workbench.action.terminal.scrollToTop",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "alt+n shift+alt+i",
        "command": "workbench.action.terminal.selectToPreviousCommand",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+m meta+n",
        "command": "workbench.action.terminal.new",
        "when": "terminalFocus"
    },
    {
        "key": "meta+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "alt+w meta+backspace",
        "command": "workbench.action.terminal.killAll",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+w meta+alt+i",
        "command": "workbench.action.toggleMaximizedPanel",
        "when": "terminalFocus"
    },
    {
        "key": "alt+j alt+r",
        "command": "-language-julia.restartREPL"
    },
    {
        "key": "alt+j alt+m",
        "command": "-language-julia.chooseModule",
        "when": "editorLangId == 'juliamarkdown' || editorTextFocus && editorLangId == 'julia' && activeEditor != 'workbench.editor.notebook'"
    },
    {
        "key": "alt+j alt+d",
        "command": "-language-julia.show-documentation",
        "when": "editorLangId == 'juliamarkdown' || editorTextFocus && editorLangId == 'julia' && activeEditor != 'workbench.editor.notebook'"
    },
    {
        "key": "alt+j alt+p",
        "command": "-language-julia.show-plotpane"
    },
    {
        "key": "alt+n alt+k",
        "command": "paragraphjump.down",
        "when": "!terminalFocus"
    },
    {
        "key": "alt+n shift+alt+k",
        "command": "paragraphjump.selectdown",
        "when": "!terminalFocus"
    },
    {
        "key": "alt+n shift+alt+i",
        "command": "paragraphjump.selectup",
        "when": "!terminalFocus"
    },
    {
        "key": "alt+n alt+i",
        "command": "paragraphjump.up",
        "when": "!terminalFocus"
    },
    {
        "key": "alt+o meta+x",
        "command": "workbench.action.inspectContextKeys",
    },
    {
        "key": "alt+x shift+f",
        "command": "toggleFindInSelection"
    },
    {
        "key": "f8",
        "command": "ahk++.debug",
        "when": "editorLangId == 'ahk'"
    },
    {
        "key": "alt+e tab",
        "command": "type",
        "args": {
            "text": "\t"
        },
        "when": "editorTextFocus"
    },
    {
        "key": "meta+shift+tab",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "alt+o d",
        "command": "workbench.action.toggleDevTools"
    },
    {
        "key": "alt+o meta+d",
        "command": "workbench.action.webview.openDeveloperTools"
    },
    {
        "key": "cmd+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorFocus"
    },
    {
        "key": "cmd+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorFocus"
    },
    {
        "key": "alt+oem_3",
        "command": "toggleVim"
    },
    {
        "key": "escape",
        "command": "-language-julia.clearCurrentInlineResult",
        "when": "editorLangId == 'juliamarkdown' || editorLangId == 'markdown' || editorTextFocus && juliaHasInlineResult && !editorHasSelection && !findWidgetVisible && !inSnippetMode && !isInEmbeddedEditor && !markerNavigationVisible && !onTypeRenameInputVisible && !parameterHintsVisible && !renameInputVisible && !suggestWidgetVisible && editorLangId == 'julia'"
    },
    {
        "key": "escape",
        "command": "-language-julia.clearCurrentInlineResult",
        "when": "editorLangId == 'juliamarkdown' || editorTextFocus && juliaHasInlineResult && !editorHasSelection && !findWidgetVisible && !inSnippetMode && !isInEmbeddedEditor && !markerNavigationVisible && !onTypeRenameInputVisible && !parameterHintsVisible && !renameInputVisible && !suggestWidgetVisible && editorLangId == 'julia'"
    },
    {
        "key": "meta+i meta+c",
        "command": "-language-julia.clearAllInlineResultsInEditor",
        "when": "editorLangId == 'juliamarkdown' || editorLangId == 'markdown' || editorTextFocus && editorLangId == 'julia' && activeEditor != 'workbench.editor.notebook'"
    },
    {
        "key": "alt+f r",
        "command": "editor.action.startFindReplaceAction"
    },
    {
        "key": "cmd+enter",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus"
    },
    {
        "key": "enter",
        "command": "-renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus"
    },
    {
        "key": "enter",
        "command": "list.select",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+shift+right",
        "command": "-editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+cmd+right",
        "command": "-editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+k",
        "command": "-keybindings.editor.recordSearchKeys",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "shift+end",
        "command": "-cursorEndSelect",
        "when": "textInputFocus"
    },
    
]